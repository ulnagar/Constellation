@page "/Awards/"

@attribute [Authorize]

@inject IMediator mediator
@inject NavigationManager NavigationManager

<h2>Student Awards</h2>

<div>
    <div class="mt-3">

        <div class="form-group row mt-3">
            <div class="col-3"><label>Student</label></div>
            <div class="col font-weight-bold">
                <select class="form-control" @onchange="SelectNewStudent">
                    <option value="">-- Select --</option>
                    @foreach (var student in Students.OrderBy(student => student.CurrentGrade).ThenBy(student => student.LastName))
                    {
                        <option value="@student.StudentId" selected=@(SelectedStudent?.StudentId == student.StudentId)>(@student.CurrentGrade) @student.DisplayName</option>
                    }
                </select>
            </div>
        </div>

        <div class="row mt-3">
            <h4>Total Award Tally</h4>
            <table class="table table-striped text-center">
                <thead>
                    <tr>
                        <th>Astra Awards</th>
                        <th>Stellar Awards</th>
                        <th>Galaxy Medals</th>
                        <th>Universal Achiever Awards</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Awards.Count == 0)
                    {
                        <tr class="group"><td colspan="100%">Nothing to see here!</td></tr>
                    } else
                    {
                        <tr>
                            <td>@Awards.Count(award => award.Type == "Astra Award")</td>
                            <td>@Awards.Count(award => award.Type == "Stellar Award")</td>
                            <td>@Awards.Count(award => award.Type == "Galaxy Medal")</td>
                            <td>@Awards.Count(award => award.Type == "Aurora Universal Achiever")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="row mt-3">
            <h4>Recent Awards</h4>
            <DataTable Items="AwardsForDisplay.ToList()" TItem="StudentAwardsForList">
                <TableHeader>
                    <th>Date</th>
                    <th>Type</th>
                </TableHeader>
                <RowTemplate Context="entry">
                    <td width="33%">@entry.AwardedOn.ToLongDateString()</td>
                    <td>@entry.Type</td>
                </RowTemplate>
            </DataTable>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    public SchoolDto CurrentlySelectedSchool { get; set; }

    public ICollection<StudentFromSchoolForDropdownSelection> Students { get; set; } = new List<StudentFromSchoolForDropdownSelection>();
    public StudentFromSchoolForDropdownSelection SelectedStudent { get; set; }

    public ICollection<StudentAwardsForList> Awards { get; set; } = new List<StudentAwardsForList>();
    public ICollection<StudentAwardsForList> AwardsForDisplay { get; set; } = new List<StudentAwardsForList>();

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            var students = await mediator.Send(new GetStudentsFromSchoolForSelectionQuery { SchoolCode = SelectedSchool.Code });
            Students = students.OrderBy(student => student.CurrentGrade).ThenBy(student => student.LastName).ThenBy(student => student.FirstName).ToList();

            SelectedStudent = null;

            Awards = new List<StudentAwardsForList>();
            AwardsForDisplay = new List<StudentAwardsForList>();
        }
    }

    private async Task SelectNewStudent(ChangeEventArgs e)
    {
        var studentId = e.Value.ToString();

        SelectedStudent = Students.First(student => student.StudentId == studentId);

        await GetAwardsForSelectedStudent();
    }

    private async Task GetAwardsForSelectedStudent()
    {
        if (SelectedStudent != null)
        {
            var awards = await mediator.Send(new GetAwardsForStudentQuery { StudentId = SelectedStudent.StudentId });
            Awards = awards.ToList();
            AwardsForDisplay = Awards.OrderByDescending(award => award.AwardedOn).Take(10).ToList();
        } else
        {
            Awards = new List<StudentAwardsForList>();
            AwardsForDisplay = new List<StudentAwardsForList>();
        }
    }
}
