@page "/Absences/Partial/{ResponseId:guid}/Verify"

@attribute [Authorize]

@inject IMediator mediator
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Partial Absence Verification</h1>

<div class="form-horizontal">
    <div class="form-group row">
        <label class="col-md-2">Absence Date</label>
        <div class="col-md-6">@Response?.AbsenceDate.ToShortDateString()</div>
    </div>

    <div class="form-group row">
        <label class="col-md-2">Student Name</label>
        <div class="col-md-6">@Response?.StudentName</div>
    </div>

    <div class="form-group row">
        <label class="col-md-2">Class Name</label>
        <div class="col-md-6">@Response?.ClassName</div>
    </div>

    <div class="form-group row">
        <label class="col-md-2">Period Name</label>
        <div class="col-md-6">@Response?.AbsencePeriodName</div>
    </div>

    <div class="form-group row">
        <label class="col-md-2">Absence Timeframe</label>
        <div class="col-md-6">@Response?.AbsenceTimeframe</div>
    </div>

    <div class="form-group row">
        <label class="col-md-2">Explanation</label>
        <div class="col-md-6">@Response?.Explanation</div>
    </div>

    <div class="form-group row">
        <label class="col-md-2">Comment</label>
        <div class="col-md-6">
            <textarea @bind="Comment" rows="5" cols="100" class="form-control"></textarea>
            <span class="text-danger">@CommentValidationText</span>
        </div>
    </div>

    <div class="form-group row">
        <div class="offset-1 col-md-3">
            <button class="btn btn-success btn-block btn-lg" @onclick="VerifyResponse">Verify</button>
        </div>
        <div class="offset-2 col-md-3">
            <button class="btn btn-warning btn-block btn-lg" @onclick="RejectResponse">Reject</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid ResponseId { get; set; }
    public Guid CurrentResponseId { get; set; }

    public PartialAbsenceResponseForVerification Response { get; set; }

    public string Comment { get; set; }
    public string CommentValidationText { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (ResponseId != Guid.NewGuid())
        {
            if (ResponseId != CurrentResponseId)
            {
                Response = await mediator.Send(new GetAbsenceResponseForVerificationQuery { Id = ResponseId });

                Comment = "";
                CommentValidationText = "";    
            }

            CurrentResponseId = ResponseId;
        } else
        {
            Response = new PartialAbsenceResponseForVerification();
        }
    }

    private async Task VerifyResponse()
    {
        CommentValidationText = "";

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var command = new VerifyAbsenceResponseCommand
        {
            AbsenceId = Response.AbsenceId,
            ResponseId = ResponseId,
            UserEmail = authState.User.Identity.Name,
            Comment = Comment
        };

        await mediator.Send(command);

        NavigationManager.NavigateTo("Absences");
    }

    private async Task RejectResponse()
    {
        CommentValidationText = "";

        if(string.IsNullOrWhiteSpace(Comment) || Comment.Length < 5)
        {
            CommentValidationText = "You must enter a comment to reject the students explanation for this absence!";
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var command = new RejectAbsenceResponseCommand
        {
            AbsenceId = Response.AbsenceId,
            ResponseId = ResponseId,
            UserEmail = authState.User.Identity.Name,
            Comment = Comment
        };

        await mediator.Send(command);
        NavigationManager.NavigateTo("Absences");
    }
}
