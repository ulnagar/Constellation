@page "/Stocktake/"

@attribute [Authorize]

@inject IMediator mediator
@inject NavigationManager NavigationManager

<h2>Stocktake Data Collection</h2>

<div>
    <a onclick="@(() => SubmitSighting(CurrentlySelectedStocktake.Id))" class="btn btn-primary">Sight Device</a>
</div>

<hr />

<div class="form-horizontal">
    <div class="form-group row">
        <label class="col-md-2">Stocktake</label>
        <div class="col-md-6">
            @if (ShowChangeStocktakeBox)
                {
                    <select class="form-control" @onchange="ChangeStocktake" @onblur="RestoreStocktakeLabel">
                        @foreach (var stocktake in StocktakeEvents)
                        {
                            var selected = CurrentlySelectedStocktake.Id == stocktake.Id;
                            <option value="@stocktake.Id" selected="@selected">@stocktake.Name</option>
                        }
                    </select>
                } else
                {
                    @CurrentlySelectedStocktake?.Name
                    @if (StocktakeEvents.Count > 1)
                    {
                        <button class="btn btn-sm btn-secondary ml-4" @onclick="ToggleChangeStocktakeBox">Change</button>
                    }
                }
        </div>
    </div>

    <div class="form-group row">
        <label class="col-md-2">Start Date</label>
        <div class="col-md-3">@CurrentlySelectedStocktake?.StartDate.ToShortDateString()</div>
        <label class="col-md-2">End Date</label>
        <div class="col-md-3">@CurrentlySelectedStocktake?.EndDate.ToShortDateString()</div>
    </div>
</div>

<hr />

<div class="form-group row mt-6">
    <div class="col-md-6"><h4 class="mt-2 mb-0">Recorded sightings:</h4></div>
    <div class="offset-1 col-md-3"><input @oninput="ChangeFilter" class="form-control" placeholder="Search" /></div>
</div>

<DataTable Items="FilteredSightings.ToList()" TItem="StocktakeSightingsForList">
    <TableHeader>
            <th>Serial / Asset</th>
            <th>Description</th>
            <th>User</th>
            <th>Sighted</th>
    </TableHeader>
    <RowTemplate Context="entry">
        <td>@entry.SerialNumber / @entry.AssetNumber</td>
        <td>@entry.Description</td>
        <td>@entry.UserName</td>
        <td>@entry.SightedBy (@entry.SightedAt.ToShortDateString())</td>
    </RowTemplate>
</DataTable>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    public SchoolDto CurrentlySelectedSchool { get; set; }

    public ICollection<StocktakeEventsForList> StocktakeEvents { get; set; } = new List<StocktakeEventsForList>();
    public StocktakeEventsForList CurrentlySelectedStocktake { get; set; }
    public ICollection<StocktakeSightingsForList> Sightings { get; set; } = new List<StocktakeSightingsForList>();
    public ICollection<StocktakeSightingsForList> FilteredSightings { get; set; } = new List<StocktakeSightingsForList>();

    public Guid StocktakeEventId { get; set; } = Guid.Empty;
    public string Filter { get; set; } = "";

    private bool ShowChangeStocktakeBox = false;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            StocktakeEvents = await mediator.Send(new GetCurrentStocktakeEventsQuery());

            if (StocktakeEventId == Guid.Empty)
            {
                CurrentlySelectedStocktake = StocktakeEvents.FirstOrDefault();
                StocktakeEventId = CurrentlySelectedStocktake.Id;
            } else
            {
                CurrentlySelectedStocktake = StocktakeEvents.First(stocktake => stocktake.Id == StocktakeEventId);
            }

            await UpdateSightings();
        }
    }

    private async Task UpdateSightings()
    {
        if (StocktakeEventId != Guid.Empty)
        {
            Sightings = await mediator.Send(new GetStocktakeSightingsForSchoolQuery { SchoolCode = SelectedSchool.Code, StocktakeEvent = StocktakeEventId });
            FilteredSightings = Sightings;
        }
    }

    private void ChangeFilter(ChangeEventArgs e)
    {
        Filter = e.Value.ToString();

        Console.WriteLine(Filter);

        FilterSightings();
    }

    private void FilterSightings()
    {
        if (Filter.Length < 3)
        {
            Console.WriteLine("Filter too short!");
            FilteredSightings = Sightings.ToList();
            return;
        }

        Console.WriteLine("Filtering...");
        var filteredSightings = Sightings.Where(sighting =>
            (sighting.AssetNumber != null && sighting.AssetNumber.Contains(Filter, StringComparison.CurrentCultureIgnoreCase)) ||
            (sighting.SerialNumber != null && sighting.SerialNumber.Contains(Filter, StringComparison.CurrentCultureIgnoreCase)) ||
            (sighting.Description != null && sighting.Description.Contains(Filter, StringComparison.CurrentCultureIgnoreCase)) ||
            (sighting.UserName != null && sighting.UserName.Contains(Filter, StringComparison.CurrentCultureIgnoreCase)) ||
            (sighting.SightedBy != null && sighting.SightedBy.Contains(Filter, StringComparison.CurrentCultureIgnoreCase)));

        FilteredSightings = filteredSightings.ToList();
    }

    private void SubmitSighting(Guid StocktakeId)
    {
        NavigationManager.NavigateTo($"Stocktake/Submit/{StocktakeId}");
    }

    private void ToggleChangeStocktakeBox()
    {
        ShowChangeStocktakeBox = true;
    }

    private void RestoreStocktakeLabel()
    {
        ShowChangeStocktakeBox = false;
    }

    private async Task ChangeStocktake(ChangeEventArgs e)
    {
        var stocktakeId = e.Value.ToString();

        StocktakeEventId = Guid.Parse(stocktakeId);
        CurrentlySelectedStocktake = StocktakeEvents.First(stocktake => stocktake.Id.ToString() == stocktakeId);
        await UpdateSightings();

        ShowChangeStocktakeBox = false;
    }
}
