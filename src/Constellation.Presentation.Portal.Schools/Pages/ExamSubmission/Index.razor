@page "/Exams/"
@using Constellation.Application.Common.CQRS.Portal.School.Assignment.Commands
@using Constellation.Application.Common.CQRS.Portal.School.Assignment.Queries
@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMediator mediator

<h1>Exam Uploads!</h1>

    <div class="row">
        <div class="col-6 border border-info">
            <EditForm Model="Command">
                @if (string.IsNullOrWhiteSpace(SelectedStudentId))
                {
                    // Show Student Dropdown
                } 
                else
                {
                    // Show Student Name
                }

                @if (SelectedCourseId == 0 && string.IsNullOrWhiteSpace(SelectedStudentId))
                {
                    // Show blank space
                } 
                else if (SelectedCourseId == 0 && !string.IsNullOrWhiteSpace(SelectedStudentId))
                {
                    // Show Course Dropdown
                } 
                else
                {
                    // Show Course Name
                }

                @if (SelectedAssignmentId == new Guid() && SelectedCourseId == 0)
                {
                    // Show blank space
                }
                else if (SelectedAssignmentId == new Guid() && SelectedCourseId > 0)
                {
                    // Show Assignment Dropdown
                }
                else
                {
                    // Show Assignment Name
                }
            </EditForm>
        </div>
    </div>


@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }

    public ICollection<StudentFromSchoolForDropdownSelection> Students { get; set; }

    public string SelectedStudentId { get; set; }

    public ICollection<StudentCoursesForDropdownSelection> Courses { get; set; }

    public int SelectedCourseId { get; set; }

    public ICollection<StudentAssignmentsForCourse> Assignments { get; set; }

    public Guid SelectedAssignmentId { get; set; }

    public UploadStudentAssignmentSubmissionCommand Command { get; set; } = new UploadStudentAssignmentSubmissionCommand();

    // Allow user to select:
    // 1. A Student
    // 2. A Course the student is enrolled in
    // 3. An Assessment from that course
    //
    // Then:
    // 4. Upload a file to be submitted to the assessment as the student

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedSchool != null)
        {
            var students = await mediator.Send(new GetStudentsFromSchoolForSelectionQuery { SchoolCode = SelectedSchool.Code });
            Students = students.OrderBy(student => student.CurrentGrade).ThenBy(student => student.LastName).ThenBy(student => student.FirstName).ToList();
        } else
        {
            Students = new List<StudentFromSchoolForDropdownSelection>();
        }
    }

    private async Task GetCoursesForSelectedStudent()
    {
        if (!string.IsNullOrWhiteSpace(SelectedStudentId))
        {
            var courses = await mediator.Send(new GetCoursesForStudentQuery { StudentId = SelectedStudentId });
            Courses = courses.OrderBy(course => course.Name).ToList();
        } else
        {
            Courses = new List<StudentCoursesForDropdownSelection>();
        }
    }

    private async Task GetAssignmentsForSelectedCourse()
    {
        if (SelectedCourseId != 0)
        {
            var assignments = await mediator.Send(new GetAssignmentsForCourseQuery { CourseId = SelectedCourseId });
            Assignments = assignments.OrderBy(assignment => assignment.DueDate).ToList();
        } else
        {
            Assignments = new List<StudentAssignmentsForCourse>();
        }
    }
}