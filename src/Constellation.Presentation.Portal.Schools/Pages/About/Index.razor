@page "/About/"

@attribute [Authorize]

@inject IMediator mediator
@inject NavigationManager NavigationManager

<h2>About Your School</h2>

<div class="d-flex flex-column">
    <div class="flex-grow-1">
        <TitleDivider Title="@SchoolContactRole.Principal" />
    </div>
</div>

<div class="d-flex flex-row justify-content-start flex-wrap">
    @foreach (var entry in Contacts.Where(contact => contact.Position == SchoolContactRole.Principal))
    {
        <ContactCard Contact="entry" />
    }
</div>

<div class="d-flex flex-column">
    <div class="flex-grow-1">
        <hr />
    </div>

    <div class="flex-grow-1">
        <TitleDivider Title="@SchoolContactRole.Coordinator" />
    </div>
</div>

<div class="d-flex flex-row justify-content-start flex-wrap">
    @foreach (var entry in Contacts.Where(contact => contact.Position == SchoolContactRole.Coordinator))
    {
        <ContactCard Contact="entry" />
    }
</div>

<div class="d-flex flex-column">
    <div class="flex-grow-1">
        <hr />
    </div>

    <div class="flex-grow-1">
        <TitleDivider Title="@SchoolContactRole.SciencePrac" />
    </div>
</div>

<div class="d-flex flex-row justify-content-start flex-wrap">
    @foreach (var entry in Contacts.Where(contact => contact.Position == SchoolContactRole.SciencePrac))
    {
        <ContactCard Contact="entry" />
    }
</div>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    public SchoolDto CurrentlySelectedSchool { get; set; }

    public ICollection<ContactWithRoleForList> Contacts { get; set; } = new List<ContactWithRoleForList>();

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            Contacts = await mediator.Send(new GetContactsWithRoleFromSchoolQuery { Code = SelectedSchool.Code });
        }
    }
}