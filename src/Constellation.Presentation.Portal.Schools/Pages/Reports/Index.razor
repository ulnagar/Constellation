@page "/Reports/"

@attribute [Authorize]

@inject IMediator mediator
@inject NavigationManager NavigationManager

<h1>School Reports</h1>

<div>
    <div class="mt-3">
        <GroupedDataTable Items="Reports.GroupBy(report => report.StudentName).ToList()" TItem="StudentReportForDownload" TKey="string">
            <TableHeader>
                <th>Year</th>
                <th>Report</th>
                <th>Action</th>
            </TableHeader>
            <GroupRowTemplate Context="entry">
                <td colspan="6">@entry.StudentName @entry.StudentCurrentGrade</td>
            </GroupRowTemplate>
            <RowTemplate Context="entry">
                <td>@entry.Year</td>
                <td>@entry.ReportingPeriod</td>
                <td><button class="btn btn-info btn-show-hover" @onclick="() => DownloadReport(entry.Id)">Download</button></td>
            </RowTemplate>
        </GroupedDataTable>
    </div>
</div>


@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    public SchoolDto CurrentlySelectedSchool { get; set; }

    public ICollection<StudentReportForDownload> Reports { get; set; } = new List<StudentReportForDownload>();

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            Reports = await mediator.Send(new GetStudentReportListForSchoolQuery { SchoolCode = SelectedSchool.Code });

            Reports = Reports.OrderBy(absence => absence.StudentCurrentGrade).ThenBy(absence => absence.StudentLastName).ThenBy(absence => absence.StudentFirstName).ToList();
        }
    }

    private void DownloadReport(Guid ReportId)
    {
        NavigationManager.NavigateTo($"Reports/Download/{ReportId}", true);
    }

}
