@inherits LayoutComponentBase

@inject NavigationManager navManager
@inject IMediator mediator

<CascadingValue Value="@SelectedSchool">
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <div class="top-row px-4 text-right">
                <div class="col-md-8">
                @if (ShowChangeSchoolBox)
                {
                    <select class="form-control" @onchange="ChangeSchool" @onblur="RestoreSchoolLabel">
                        @foreach (var school in Schools.OrderBy(school => school.Name))
                        {
                            var selected = SelectedSchool.Code == school.Code;
                            <option value="@school.Code" selected="@selected">@school.Code - @school.Name</option>
                        }
                    </select>
                } else
                {
                    @:School: @SelectedSchool?.Name
                    @if (Schools.Count > 1)
                    {
                        <button class="btn btn-sm btn-secondary ml-4" @onclick="ToggleChangeSchoolBox">Change School</button>
                    }
                }
                </div>
                <div class="col">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <span>Welcome!</span>
                        <a class="btn btn-sm btn-warning ml-4" href="/Portal/School/Auth/LogOut">Log Out</a>
                    } else
                    {
                        <a class="btn btn-sm btn-success ml-4" href="/Portal/School/Auth/Login">Log In</a>
                    }
                </div>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </div>
</CascadingValue>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private SchoolDto SelectedSchool { get; set; }
    private ICollection<SchoolDto> Schools { get; set; } = new List<SchoolDto>();

    private bool ShowChangeSchoolBox = false;
    private ClaimsPrincipal User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        User = authState.User;

        if (User.Identity.IsAuthenticated)
        {
            var schoolCodeClaims = User.Claims.Where(claim => claim.Type == "Schools").ToList();
            if (schoolCodeClaims.Count > 0)
            {
                var schoolCodeList = new List<string>();
                foreach (var item in schoolCodeClaims)
                {
                    if (string.IsNullOrWhiteSpace(item.Value))
                        continue;

                    if (item.Value.Contains(','))
                    {
                        var multiCodes = item.Value.Split(",").ToList();

                        foreach(var entry in multiCodes)
                        {
                            if (schoolCodeList.All(code => code != entry))
                                schoolCodeList.Add(entry);
                        }
                    } else
                    {
                        if (schoolCodeList.All(code => code != item.Value))
                            schoolCodeList.Add(item.Value);
                    }
                }

                Schools = await mediator.Send(new ConvertListOfSchoolCodesToSchoolListCommand { SchoolCodes = schoolCodeList });

                SelectedSchool = Schools.OrderBy(school => school.Code).First();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        User = authState.User;

        if (!User.Identity.IsAuthenticated)
        {
            // Redirect to login page:
            navManager.NavigateTo("Auth/LogOut");
        }
    }

    private void ToggleChangeSchoolBox()
    {
        ShowChangeSchoolBox = true;
    }

    private void RestoreSchoolLabel()
    {
        ShowChangeSchoolBox = false;
    }

    private void ChangeSchool(ChangeEventArgs e)
    {
        var schoolCode = e.Value.ToString();
        SelectedSchool = Schools.First(school => school.Code == schoolCode);

        ShowChangeSchoolBox = false;
    }

    private void Logout()
    {
        navManager.NavigateTo("Auth/LogOut");
    }

    private void Login()
    {
        navManager.NavigateTo("Auth/Login");
    }
}
