@page "{id}"
@using Constellation.Application.Faculties.GetFacultiesSummary
@using Constellation.Core.Extensions
@model Constellation.Presentation.Staff.Areas.Staff.Pages.Partner.Schools.DetailsModel

@inject IAuthorizationService authService

@{
    var authorised = await authService.AuthorizeAsync(User, AuthPolicies.CanEditSchools);
}

<h2>School Details</h2>

<div class="page-menu">
    <a asp-page="/Partner/Schools/Upsert" asp-area="Staff" asp-route-id="@Model.School.SchoolCode" class="btn btn-warning">Edit</a>
    
    <a href="javascript:history.go(-1)" class="btn btn-danger btn-pull-right">Go Back</a>
</div>

<hr />

<div>
    <div class="row">
        <label asp-for="School.SchoolCode" class="col-md-2"></label>
        <div class="col-md-9">
            @Html.DisplayFor(model => model.School.SchoolCode, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="row">
        <label asp-for="School.Name" class="col-md-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.Name, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="row">
        <label asp-for="School.Address" class="col-md-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.Address, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="row">
        <label asp-for="School.Town" class="col-md-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.Town, new { htmlAttributes = new { @class = "form-control" } })
        </div>

        <label asp-for="School.Division" class="col-md-2 offset-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.Division, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="row">
        <label asp-for="School.State" class="col-md-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.State, new { htmlAttributes = new { @class = "form-control" } })
        </div>

        <label asp-for="School.HeatSchool" class="col-md-2 offset-2">Heat Week?</label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.HeatSchool)
        </div>
    </div>

    <div class="row">
        <label asp-for="School.PostCode" class="col-md-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.PostCode, new { htmlAttributes = new { @class = "form-control" } })
        </div>

        <label asp-for="School.Electorate" class="col-md-2 offset-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.Electorate, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="row">
        <label asp-for="School.PhoneNumber" class="col-md-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.PhoneNumber, "PhoneNumber", new { htmlAttributes = new { @class = "form-control" } })
        </div>

        <label asp-for="School.PrincipalNetwork" class="col-md-2 offset-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.PrincipalNetwork, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="row">
        <label asp-for="School.FaxNumber" class="col-md-2"></label>
        <div class="col-md-3">
            @Html.DisplayFor(model => model.School.FaxNumber, "PhoneNumber", new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="row">
        <label asp-for="School.EmailAddress" class="col-md-2"></label>
        <div class="col-md-5">
            @Html.DisplayFor(model => model.School.EmailAddress, "EmailAddress", new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
</div>

<hr />

<div>
    <ul class="nav nav-pills">
        <li class="nav-item">
            <a class="nav-link active" href="#contactTab" data-toggle="tab" role="tab">School contacts</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#studentTab" data-toggle="tab" role="tab">Active students</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#staffTab" data-toggle="tab" role="tab">Active staff</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#graphTab" data-toggle="tab" role="tab">Bandwidth Graph</a>
        </li>
    </ul>

    <div class="tab-content">
        <div id="contactTab" class="tab-pane active">
            <h3>School Contacts</h3>

            <table class="table-striped table-hover data-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Role</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.School.Contacts)
                    {
                        var number = item.PhoneNumber.ToString();

                        <tr>
                            <td>@item.Name</td>
                            <td>@Html.DisplayFor(model => item.EmailAddress.Email, "EmailAddress")</td>
                            <td>@Html.DisplayFor(model => number, "PhoneNumber")</td>
                            <td>
                                @item.Role
                                @if (!string.IsNullOrWhiteSpace(item.Note))
                                {
                                    <br />
                                    <span class="font-italic text-muted">@item.Note</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div id="studentTab" class="tab-pane">
            <h3>Current Students</h3>

            <table class="table-striped table-hover students-data-table">
                <thead>
                    <tr>
                        <th>SRN</th>
                        <th>Name</th>
                        <th>Grade</th>
                        <th>Classes</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.School.Students)
                    {
                        <tr>
                            <td>@item.StudentReferenceNumber</td>
                            <td data-order="@item.Name.SortOrder"><gender gender="@item.Gender" /> @item.Name.DisplayName</td>
                            <td data-order="@item.Grade?.AsNumber()">
                                @if (!item.CurrentEnrolment)
                                {
                                    <span class="font-weight-light font-italic"><grade grade="@item.Grade" /></span>
                                }
                                else
                                {
                                    <grade grade="@item.Grade" />
                                }
                            </td>
                            <td>
                                @foreach (var course in item.Offerings.OrderBy(offering => offering.Name))
                                {
                                    if (course.Current)
                                    {
                                        (string group, string line) details = course.Name.ExtractLine();

                                        <a asp-page="/Subject/Offerings/Details" asp-area="Staff" asp-route-id="@course.Id.Value" class="badge @details.group-@details.line">@course.Name</a>
                                    }
                                    else
                                    {
                                        <a asp-page="/Subject/Offerings/Details" asp-area="Staff" asp-route-id="@course.Id.Value" class="badge badge-secondary">@course.Name</a>
                                    }
                                }
                            </td>
                            <td>
                                <a asp-page="/Partner/Students/Details" asp-area="Staff" asp-route-id="@item.StudentId" class="btn btn-sm btn-info btn-show-hover">More Info...</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div id="staffTab" class="tab-pane">
            <h3>Current Staff</h3>

            <table class="table-striped table-hover staff-data-table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Faculty</th>
                        <th>Classes</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.School.Staff)
                    {
                        <tr>
                            <td>@item.StaffId</td>
                            <td data-order="@item.Name.SortOrder">@item.Name.DisplayName</td>
                            <td>
                                @foreach (var faculty in item.Faculties)
                                {
                                    <faculty-label faculty="@new FacultySummaryResponse(new(), faculty.Key, faculty.Value, 0)"></faculty-label>
                                }
                            </td>
                            <td>
                                @foreach (var course in item.Offerings.OrderBy(offering => offering.Name))
                                {
                                    if (course.Current)
                                    {
                                        (string group, string line) details = course.Name.ExtractLine();

                                        <a asp-page="/Subject/Offerings/Details" asp-area="Staff" asp-route-id="@course.Id.Value" class="badge @details.group-@details.line">@course.Name</a>
                                    }
                                    else
                                    {
                                        <a asp-page="/Subject/Offerings/Details" asp-area="Staff" asp-route-id="@course.Id.Value" class="badge badge-secondary">@course.Name</a>
                                    }
                                }
                            </td>
                            <td>
                                <a asp-page="/Partner/Staff/Details" asp-area="Staff" asp-route-id="@item.StaffId" class="btn btn-sm btn-info btn-show-hover">More Info...</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div id="graphTab" class="tab-pane">
            <h3>Bandwidth Graph</h3>

            <button id="getTGraph" type="button" class="btn btn-info btn-sm">Get Todays Graph</button> <button id="getYGraph" type="button" class="btn btn-info btn-sm">Get Yesterdays Graph</button> <button id="saveGraph" type="button" class="btn btn-warning btn-sm new-group">Save Graph</button>

            <div class="row">
                <canvas id="bandwidthChart" class="canvas-background"></canvas>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        $(document).ready(function (){
            $('.students-data-table').DataTable({
                "order": [
                    [2, 'asc'],
                    [1, 'asc']
                ] 
            });

            $('.staff-data-table').DataTable({
                "order": [
                    [1, 'asc']
                ]
            });
        });

        $(document)
            .ready(function () {
                $('#getTGraph').click(function () {
                    $('#getTGraph').prop('disabled', true);
                    var ctx = document.getElementById('bandwidthChart').getContext('2d');
                    canvasLoadingDisplay(ctx);
                    $.ajax({
                        url: "?handler=AjaxGetGraphData",
                        type: "GET",
                        dataType: "json",
                        data: { "id": "@Model.School.SchoolCode", "day": 0 },
                        success: function (data) {
                            console.log(data);
                            ShowGraph(data);
                            $('#getTGraph').prop('disabled', false);
                        },
                        error: function (request, status, error) {
                            canvasClear(ctx);
                            $('#getTGraph').prop('disabled', false);
                        }
                    });
                });
            });

        $(document)
            .ready(function () {
                $('#getYGraph').click(function () {
                    $('#getYGraph').prop('disabled', true);
                    var ctx = document.getElementById('bandwidthChart').getContext('2d');
                    canvasLoadingDisplay(ctx);
                    $.ajax({
                        url: "?handler=AjaxGetGraphData",
                        type: "GET",
                        dataType: "json",
                        data: { "id": "@Model.School.SchoolCode", "day": -1 },
                        success: function (data) {
                            ShowGraph(data);
                        },
                        error: function (request, status, error) {
                            canvasClear(ctx);
                            $('#getYGraph').prop('disabled', false);
                        }
                    });
                });
            });

        $(document)
            .ready(function () {
                $('#saveGraph').click(function () {
                    if (MyChart == null) {
                        //
                    } else {
                        var ctx = document.getElementById("bandwidthChart").getContext("2d");
                        //var base64 = MyChart.toBase64Image();

                        var base64 = canvasToImage(ctx, "white");
                        download(base64, GraphFileName, "image/png");
                    }
                });
            });

        function canvasClear(context) {
            var canvas = context.canvas;
            var w = canvas.width;
            var h = canvas.height;

            context.fillStyle = '#fff';
            context.fillRect(0, 0, w, h);
            context.fillStyle = '#000';
            context.font = '60px sans-serif';
            context.fillText("Error...", 15, h / 2 + 35);
        }

        function canvasLoadingDisplay(context) {
            var canvas = context.canvas;
            var w = canvas.width;
            var h = canvas.height;

            context.fillStyle = '#fff';
            context.fillRect(0, 0, w, h);
            context.fillStyle = '#000';
            context.font = '60px sans-serif';
            context.fillText("Loading...", 15, h / 2 + 35);
        }

        function canvasToImage(context, backgroundColor) {
            canvas = context.canvas;
            //cache height and width
            var w = canvas.width;
            var h = canvas.height;

            var data;

            //get the current ImageData for the canvas.
            data = context.getImageData(0, 0, w, h);

            //store the current globalCompositeOperation
            var compositeOperation = context.globalCompositeOperation;

            //set to draw behind current content
            context.globalCompositeOperation = "destination-over";

            //set background color
            context.fillStyle = backgroundColor;

            //draw background / rect on entire canvas
            context.fillRect(0, 0, w, h);

            //get the image data from the canvas
            var imageData = this.canvas.toDataURL("image/jpeg");

            //clear the canvas
            context.clearRect(0, 0, w, h);

            //restore it with original / cached ImageData
            context.putImageData(data, 0, 0);

            //reset the globalCompositeOperation to what it was
            context.globalCompositeOperation = compositeOperation;

            //return the Base64 encoded data url string
            return imageData;
        }

        var MyChart;
        var GraphFileName;

        function ShowGraph(data) {
            if (MyChart != null) {
                MyChart.destroy();
            }

            GraphFileName = data.siteName + ' ' + data.intlDate + '.png';

            var dataSet = {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: "Student Lessons",
                            backgroundColor: 'rgba(230,168,59,0.2)',
                            //backgroundColor: ['rgba(240,159,20,0.33)'],
                            borderColor: 'rgba(0,0,0,0)',
                            borderRadius: 0,
                            pointRadius: 0,
                            pointHitRadius: 0,
                            stepped: true,
                            fill: 'start',
                            data: []
                        },
                        {
                            label: "WAN Connection Maximum",
                            backgroundColor: 'rgba(0,0,0,0)',
                            borderColor: 'rgba(250, 216, 89, 1)',
                            borderRadius: 4,
                            pointRadius: 0,
                            pointHitRadius: 0,
                            data: []
                        },
                        {
                            label: "WAN Inbound (download)",
                            backgroundColor: 'rgba(200, 99, 132, .2)',
                            borderColor: 'rgba(200, 99, 132, .7)',
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHitRadius: 7,
                            data: []
                        },
                        {
                            label: "WAN Outbound (upload)",
                            backgroundColor: 'rgba(0, 10, 130, .2)',
                            borderColor: 'rgba(0, 10, 130, .7)',
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHitRadius: 7,
                            data: []
                        },
                        {
                            label: "INT Connection Maximum",
                            backgroundColor: 'rgba(0,0,0,0)',
                            borderColor: 'rgba(122, 249, 86, 1)',
                            borderRadius: 4,
                            pointRadius: 0,
                            pointHitRadius: 0,
                            data: []
                        },
                        {
                            label: "INT Inbound (download)",
                            backgroundColor: 'rgba(0, 127, 53, .2)',
                            borderColor: 'rgba(0, 127, 53, .7)',
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHitRadius: 7,
                            data: []
                        },
                        {
                            label: "INT Outbound (upload)",
                            backgroundColor: 'rgba(127, 53, 0, .2)',
                            borderColor: 'rgba(127, 53, 0, .7)',
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHitRadius: 7,
                            data: []
                        }
                    ]
                },
                options: {
                    responsive: true,
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    scales: {
                        y: {
                            display: true,
                            afterDataLimits: function (axis) {
                                var chartDataSet = axis.chart.config.data.datasets[0];
                                chartDataSet.data.forEach(function (item, i) {
                                    if (item != 0) chartDataSet.data[i] = axis.max;
                                });
                            }
                        },
                        x: {
                            display: true
                        }
                    },
                    title: {
                        display: true,
                        text: data.siteName + " - " + data.date,
                        fontSize: 16
                    }
                }
            };

            data.data.sort(function (a, b) {
                var timeA = a.time;
                var timeB = b.time;

                var comparison = 0;
                if (timeA > timeB) {
                    comparison = 1;
                } else if (timeA < timeB) {
                    comparison = -1;
                }

                return comparison;
            });

            $.each(data.data,
                function (index, point) {
                    dataSet["data"]["labels"].push(point.time);

                    if (point.lesson === false) {
                        dataSet["data"]["datasets"][0]["data"].push(0);
                    } else {
                        dataSet["data"]["datasets"][0]["data"].push(1);
                    }

                    dataSet["data"]["datasets"][1]["data"].push(point.networks[0].connection);
                    dataSet["data"]["datasets"][2]["data"].push(point.networks[0].inbound);
                    dataSet["data"]["datasets"][3]["data"].push(point.networks[0].outbound);
                    dataSet["data"]["datasets"][4]["data"].push(point.networks[1].connection);
                    dataSet["data"]["datasets"][5]["data"].push(point.networks[1].inbound);
                    dataSet["data"]["datasets"][6]["data"].push(point.networks[1].outbound);
                });

            console.log(dataSet);

            var ctx = document.getElementById('bandwidthChart').getContext('2d');
            MyChart = new Chart(ctx, dataSet);
        };

    </script>
}