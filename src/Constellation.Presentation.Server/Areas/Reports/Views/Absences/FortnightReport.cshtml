@using Constellation.Application.Extensions
@model Absence_FortnightReportViewModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        body {
            font-size: 16px;
        }

        .mt-2 {
            margin-top: 0.5em;
        }

        .mt-3 {
            margin-top: 1em;
        }

        .mt-4 {
            margin-top: 1.25em;
        }

        .w-25 {
            width: 25%;
        }

        td.app-card {
            padding: 1rem .25rem .25rem .5rem;
            vertical-align: top;
            border-bottom: 1px solid;
        }

        tr th {
            width: 30%;
        }

        tr td {
            width: 70%;
        }

        tr td, tr th {
            padding: 1em;
            border: 1px solid;
        }

        th {
            text-align: left;
        }

        .table-roll {
            width: 95%;
            font-size: 12px;
            border: 1px solid;
            border-collapse: collapse;
        }

        .offset-1 {
            margin-left: 5%;
        }

        .col-10 {
            -ms-flex: 0 0 83.333333%;
            flex: 0 0 83.333333%;
            /*max-width: 83.333333%*/
        }

        .row {
            display: -ms-flexbox;
            display: flex;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
            margin-right: -15px;
            margin-left: -15px
        }

        .logo {
            width: 50%;
            margin-top: 1.5em;
            margin-right: 5%;
        }

        .right-align {
            text-align: right;
        }
    </style>
</head>
<body>
    <div class="row">
        <div class="offset-1 col-10">
            <h2>Week A</h2>
        </div>

        @foreach (var entry in Model.DateData.OrderBy(d => d.Date).Take(7))
        {
            if (entry.Date.DayOfWeek == DayOfWeek.Sunday || entry.Date.DayOfWeek == DayOfWeek.Saturday)
            {
                continue;
            }

            <div class="offset-1 col-10" style="page-break-inside: avoid">
                @if (!Model.ExcludedDates.Contains(entry.Date))
                {
                    <h4>@entry.Date.ToLongDateString()</h4>

                    if (!entry.SessionsByOffering.Any())
                    {
                        <span>No classes scheduled this day</span>
                    }
                    else
                    {
                        <table class="mt-3 table-roll">
                            @foreach (var group in entry.SessionsByOffering)
                            {
                                var periodName = (group.Count() > 1) ? $"{group.First().Period.Name} - {group.Last().Period.Name}" : group.First().Period.Name;
                                var periodTimeframe = $"{group.First().Period.StartTime.As12HourTime()} - {group.Last().Period.EndTime.As12HourTime()}";

                                <tr>
                                    <th>
                                        @periodName<br />
                                        @periodTimeframe<br />
                                        @group.First().Offering.Name<br />
                                        <span style="white-space: nowrap">@group.First().Offering.Course.Name</span>
                                    </th>
                                    <td>
                                        @{
                                            var periodAbsences = Model.Absences.Where(a => a.Date.Date == entry.Date && a.OfferingId == group.Key);

                                            if (periodAbsences.Any())
                                            {
                                                foreach (var absence in periodAbsences.OrderBy(a => a.StartTime))
                                                {
                                                    <strong>@absence.Type (@absence.AbsenceTimeframe) - @absence.AbsenceReason</strong>

                                                    if (absence.Explained)
                                                    {
                                                        if (absence.ExternallyExplained && string.IsNullOrWhiteSpace(absence.ExternalExplanation))
                                                        {
                                                            @:<br />Explained via Sentral
                                                        }
                                                        else if (absence.ExternallyExplained)
                                                        {
                                                            @:<br />Explained via Sentral: @absence.ExternalExplanation (@absence.ExternalExplanationSource)
                                                        }
                                                        else
                                                        {
                                                            foreach (var response in absence.Responses)
                                                            {
                                                                @:<br />Explained via Portal: @response.Explanation (@response.From)
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        @:<br />No explanation provided yet.
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                <strong>Student was marked present for the entire lesson</strong>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        </table>
                    }
                }
                else
                {
                    <h4>@entry.Date.ToLongDateString()</h4>
                    <span>Non Teaching Day</span>
                }
            </div>
        }

        <div style="page-break-after: always; border: none;"></div>

        <div class="offset-1 col-10">
            <h2>Week B</h2>
        </div>

        @foreach (var entry in Model.DateData.OrderBy(d => d.Date).Skip(7))
        {
            if (entry.Date.DayOfWeek == DayOfWeek.Sunday || entry.Date.DayOfWeek == DayOfWeek.Saturday)
            {
                continue;
            }

            <div class="offset-1 col-10" style="page-break-inside: avoid">
                @if (!Model.ExcludedDates.Contains(entry.Date))
                {
                    <h4>@entry.Date.ToLongDateString()</h4>

                    if (!entry.SessionsByOffering.Any())
                    {
                        <span>No classes scheduled this day</span>
                    }
                    else
                    {
                        <table class="mt-3 table-roll">
                            @foreach (var group in entry.SessionsByOffering)
                            {
                                var periodName = (group.Count() > 1) ? $"{group.First().Period.Name} - {group.Last().Period.Name}" : group.First().Period.Name;
                                var periodTimeframe = $"{group.First().Period.StartTime.As12HourTime()} - {group.Last().Period.EndTime.As12HourTime()}";

                                <tr>
                                    <th>
                                        @periodName<br />
                                        @periodTimeframe<br />
                                        @group.First().Offering.Name<br />
                                        <span style="white-space: nowrap">@group.First().Offering.Course.Name</span>
                                    </th>
                                    <td>
                                        @{
                                            var periodAbsences = Model.Absences.Where(a => a.Date.Date == entry.Date && a.OfferingId == group.Key);

                                            if (periodAbsences.Any())
                                            {
                                                foreach (var absence in periodAbsences.OrderBy(a => a.StartTime))
                                                {
                                                    <strong>@absence.Type (@absence.AbsenceTimeframe) - @absence.AbsenceReason</strong>

                                                    if (absence.Explained)
                                                    {
                                                        if (absence.ExternallyExplained && string.IsNullOrWhiteSpace(absence.ExternalExplanation))
                                                        {
                                                            @:<br />Explained via Sentral
                                                        }
                                                        else if (absence.ExternallyExplained)
                                                        {
                                                            @:<br />Explained via Sentral: @absence.ExternalExplanation (@absence.ExternalExplanationSource)
                                                        }
                                                        else
                                                        {
                                                            foreach (var response in absence.Responses)
                                                            {
                                                                @:<br />Explained via Portal: @response.Explanation (@response.From)
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        @:<br />No explanation provided yet.
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                <strong>Student was marked present for the entire lesson</strong>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        </table>
                    }
                }
                else
                {
                    <h4>@entry.Date.ToLongDateString()</h4>
                    <span>Non Teaching Day</span>
                }
            </div>
        }

    </div>

</body>
</html>