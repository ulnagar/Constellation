@page
@model Constellation.Presentation.Server.Areas.SchoolAdmin.Pages.Awards.DashboardModel

@Html.AntiForgeryToken()

<h2>Awards Dashboard</h2>

<hr />

<div class="graph-grid">
    <div></div>
    <div class="title">This Month</div>
    <div class="title">Year To Date</div>
    <div class="row-title">Astra Awards</div>
    <div><canvas id="monthAstra" class="canvas-background"></canvas></div>
    <div><canvas id="ytdAstra" class="canvas-background"></canvas></div>
    <div class="row-title">Stellar Awards</div>
    <div><canvas id="monthStellar" class="canvas-background"></canvas></div>
    <div><canvas id="ytdStellar" class="canvas-background"></canvas></div>
    <div class="row-title">Galaxy Medals</div>
    <div><canvas id="monthGalaxy" class="canvas-background"></canvas></div>
    <div><canvas id="ytdGalaxy" class="canvas-background"></canvas></div>
    <div class="row-title">Universal Achievers</div>
    <div><canvas id="monthUA" class="canvas-background"></canvas></div>
    <div><canvas id="ytdUA" class="canvas-background"></canvas></div>
</div>

@section scripts {
    <script>
        var YTDData;
        var MonthData;

        var MonthAstra, MonthStellar, MonthGalaxy, MonthUA;
        var YTDAstra, YTDStellar, YTDGalaxy, YTDUA;

        $(document).ready(function () {
            var graphs = document.getElementsByClassName('canvas-background');
            $.each(graphs, function (index, canvas) {
                var ctx = canvas.getContext('2d');
                canvasLoadingDisplay(ctx);
            })

            $.ajax({
                type: "POST",
                dataType: "json",
                url: '?handler=getData',
                headers: {
                    RequestVerificationToken:
                        $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    YTDData = response.filter(item => item.reportPeriod === "YTD");
                    MonthData = response.filter(item => item.reportPeriod === "This Month");
                    ShowCharts();
                },
                error: function (error) {
                    console.log(error);
                }
            });
        });

        function canvasLoadingDisplay(context) {
            var canvas = context.canvas;
            var w = canvas.width;
            var h = canvas.height;

            context.fillStyle = '#fff';
            context.fillRect(0, 0, w, h);
            context.fillStyle = '#000';
            context.font = '30px sans-serif';
            context.fillText("Loading...", 15, h / 2 + 35);
        }

        function ShowCharts() {
            var dataSetTemplate = {
                type: 'pie',
                data: {
                    labels: ["Year 05", "Year 06", "Year 07", "Year 08", "Year 09", "Year 10", "Year 11", "Year 12"],
                    datasets: [
                        {
                            backgroundColor: [
                                'rgba(178, 34, 34, 1)',
                                'rgba(255, 140, 0, 1)',
                                'rgba(255, 215, 0, 1)',
                                'rgba(128, 0, 0, 1)',
                                'rgba(34, 139, 34, 1)',
                                'rgba(64, 224, 208, 1)',
                                'rgba(100, 149, 237, 1)',
                                'rgba(128, 0, 128, 1)'
                            ],
                            data: []
                        }
                    ]
                },
                options: {
                    responsive: false,
                    plugins: {
                        legend: {
                            position: "left"
                        }
                    }
                }
            }

            if (MonthAstra != null) {
                MonthAstra.destroy();
            }

            var MonthAstraData = $.extend(true, {}, dataSetTemplate);
            PopulateData(MonthAstraData, "Month", "Astra");
            var MonthAstraCtx = document.getElementById('monthAstra').getContext('2d');
            MonthAstra = new Chart(MonthAstraCtx, MonthAstraData);

            if (YTDAstra != null) {
                YTDAstra.destroy();
            }

            var YtdAstraData = $.extend(true, {}, dataSetTemplate);
            PopulateData(YtdAstraData, "YTD", "Astra");
            var YtdAstraCtx = document.getElementById('ytdAstra').getContext('2d');
            YTDAstra = new Chart(YtdAstraCtx, YtdAstraData);

            if (MonthStellar != null) {
                MonthStellar.destroy();
            }

            var MonthStellarData = $.extend(true, {}, dataSetTemplate);
            PopulateData(MonthStellarData, "Month", "Stellar");
            var MonthStellarCtx = document.getElementById('monthStellar').getContext('2d');
            MonthStellar = new Chart(MonthStellarCtx, MonthStellarData);

            if (YTDStellar != null) {
                YTDStellar.destroy();
            }

            var YtdStellarData = $.extend(true, {}, dataSetTemplate);
            PopulateData(YtdStellarData, "YTD", "Stellar");
            var YtdStellarCtx = document.getElementById('ytdStellar').getContext('2d');
            YTDStellar = new Chart(YtdStellarCtx, YtdStellarData);

            if (MonthGalaxy != null) {
                MonthGalaxy.destroy();
            }

            var MonthGalaxyData = $.extend(true, {}, dataSetTemplate);
            PopulateData(MonthGalaxyData, "Month", "Galaxy");
            var MonthGalaxyCtx = document.getElementById('monthGalaxy').getContext('2d');
            MonthGalaxy = new Chart(MonthGalaxyCtx, MonthGalaxyData);

            if (YTDGalaxy != null) {
                YTDGalaxy.destroy();
            }

            var YtdGalaxyData = $.extend(true, {}, dataSetTemplate);
            PopulateData(YtdGalaxyData, "YTD", "Galaxy");
            var YtdGalaxyCtx = document.getElementById('ytdGalaxy').getContext('2d');
            YTDGalaxy = new Chart(YtdGalaxyCtx, YtdGalaxyData);

            if (MonthUA != null) {
                MonthUA.destroy();
            }

            var MonthUniversalData = $.extend(true, {}, dataSetTemplate);
            PopulateData(MonthUniversalData, "Month", "Universal");
            var MonthUniversalCtx = document.getElementById('monthUA').getContext('2d');
            MonthUA = new Chart(MonthUniversalCtx, MonthUniversalData);

            if (YTDUA != null) {
                YTDUA.destroy();
            }

            var YtdUniversalData = $.extend(true, {}, dataSetTemplate);
            PopulateData(YtdUniversalData, "YTD", "Universal");
            var YtdUniversalCtx = document.getElementById('ytdUA').getContext('2d');
            YTDUA = new Chart(YtdUniversalCtx, YtdUniversalData);
        }

        function PopulateData(data, series, type) {
            var dataSeries;

            if (series === "Month") {
                dataSeries = MonthData;
            } else {
                dataSeries = YTDData;
            }

            var awardType;
            switch (type) {
                case "Astra":
                    awardType = "Astra Award";
                    break;
                case "Stellar":
                    awardType = "Stellar Award";
                    break;
                case "Galaxy":
                    awardType = "Galaxy Medal";
                    break;
                case "Universal":
                    awardType = "Aurora Universal Achiever";
                    break;
            }

            $.each(groupBy(dataSeries, 'awardType'),
                function (index, point) {
                    if (point[0].awardType === awardType) {
                        data["data"]["datasets"][0]["data"].push(point.find(item => item.grade === "Year 05").count);
                        data["data"]["datasets"][0]["data"].push(point.find(item => item.grade === "Year 06").count);
                        data["data"]["datasets"][0]["data"].push(point.find(item => item.grade === "Year 07").count);
                        data["data"]["datasets"][0]["data"].push(point.find(item => item.grade === "Year 08").count);
                        data["data"]["datasets"][0]["data"].push(point.find(item => item.grade === "Year 09").count);
                        data["data"]["datasets"][0]["data"].push(point.find(item => item.grade === "Year 10").count);
                        data["data"]["datasets"][0]["data"].push(point.find(item => item.grade === "Year 11").count);
                        data["data"]["datasets"][0]["data"].push(point.find(item => item.grade === "Year 12").count);
                    }
                });
        }

        var groupBy = function (xs, key) {
            return xs.reduce(function (rv, x) {
                (rv[x[key]] = rv[x[key]] || []).push(x);
                return rv;
            }, {});
        };
    </script>
}