@page "/Reports/"

@using Constellation.Core.Extensions;
@using Constellation.Application.Reports.GetStudentReportsForSchool;
@using System.Net.Mime

@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IModalService Modal

<Loader IsLoading="@IsLoading">
    <h2>School Reports</h2>

    <div>
        <div class="mt-3">
            <GroupedDataTable Items="Reports.GroupBy(report => report.DisplayName).ToList()" TItem="SchoolStudentReportResponse" TKey="string">
                <TableHeader>
                    <th>Year</th>
                    <th>Report</th>
                    <th>Action</th>
                </TableHeader>
                <GroupRowTemplate Context="entry">
                    <td colspan="6">@entry.DisplayName @entry.Grade.AsName()</td>
                </GroupRowTemplate>
                <RowTemplate Context="entry">
                    <td>@entry.Year</td>
                    <td>@entry.ReportingPeriod</td>
                    <td><button class="btn btn-info btn-show-hover" @onclick="() => DownloadReport(entry.ReportId.Value)">Download</button></td>
                </RowTemplate>
            </GroupedDataTable>
        </div>
    </div>
</Loader>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    public SchoolDto CurrentlySelectedSchool { get; set; }

    private bool IsLoading { get; set; } = false;

    public List<SchoolStudentReportResponse> Reports { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            ApiResult<List<SchoolStudentReportResponse>> reportsResponse = await Http.GetFromJsonAsync<ApiResult<List<SchoolStudentReportResponse>>>($"api/Reports/ForSchool/{SelectedSchool.Code}");
            if (!reportsResponse.IsSuccess)
            {
                ModalParameters parameters = new() { { "Text", reportsResponse.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(reportsResponse.Error.Code, parameters, options);
                await modal.Result;

                IsLoading = false;

                return;
            }
            
            Reports = reportsResponse.Value
                .OrderBy(report => report.Grade)
                .ThenBy(report => report.LastName)
                .ThenBy(report => report.FirstName)
                .ToList();
        }

        IsLoading = false;
    }

    private async Task DownloadReport(Guid ReportId)
    {
        try
        {
            IsLoading = true;

            HttpResponseMessage response = await Http.PostAsJsonAsync($"api/Reports/Download", ReportId);
            IEnumerable<string> contentType = response.Content.Headers.GetValues("Content-Type").ToList();

            if (contentType.Any(entry => entry.Contains(MediaTypeNames.Application.Json)))
            {
                ApiResult result = await response.Content.ReadFromJsonAsync<ApiResult>();

                ModalParameters parameters = new() { { "Text", result.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(result.Error.Code, parameters, options);
                await modal.Result;

                return;
            }

            // This returns the file in the response variable.
            // Need to push it to the browser as a file download, possibly using JS
            // https://docs.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-6.0

            Stream fileStream = await response.Content.ReadAsStreamAsync();
            string fileName = string.Empty;

            SchoolStudentReportResponse report = Reports.First(report => report.ReportId.Value == ReportId);

            fileName = $"{report.LastName}, {report.FirstName} - {report.ReportingPeriod}.pdf";

            using DotNetStreamReference streamRef = new(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsLoading = false;
        }
    }

}
