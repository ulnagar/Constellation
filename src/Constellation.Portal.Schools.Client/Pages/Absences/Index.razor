@page "/Absences/"

@using System.Threading
@using Constellation.Application.Absences.GetOutstandingAbsencesForSchool;
@using Constellation.Core.Extensions

@attribute [Authorize]

@implements IDisposable

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<Loader IsLoading="@IsLoading">
    <h2>Student Absences</h2>

    <div class="d-flex flex-row mt-3 mb-3">
        <a href="Absences/Reports" class="btn btn-warning">Attendance Reports</a>
    </div>

    <hr />

    <div class="d-flex flex-row justify-content-around mt-3 mb-3">
        <div class="cursor-pointer border border-secondary rounded p-3 h-100 text-center @(AbsencesType == AbsenceCategory.UnexplainedPartials ? "selected" : "unselected")" @onclick="() => ChangeAbsenceType(AbsenceCategory.UnexplainedPartials)">
            <div>Unexplained Partial Absences</div>
            <div>@UnexplainedPartialsCount</div>
        </div>

        <div class="cursor-pointer border border-secondary rounded p-3 h-100 text-center @(AbsencesType == AbsenceCategory.UnverifiedPartials ? "selected" : "unselected")" @onclick="() => ChangeAbsenceType(AbsenceCategory.UnverifiedPartials)">
            <div>Unverified Partial Absences</div>
            <div>@UnverifiedPartialsCount</div>
        </div>

        <div class="cursor-pointer border border-secondary rounded p-3 h-100 text-center @(AbsencesType == AbsenceCategory.UnexplainedWholes ? "selected" : "unselected")" @onclick="() => ChangeAbsenceType(AbsenceCategory.UnexplainedWholes)">
            <div>Unexplained Whole Absences</div>
            <div>@UnexplainedWholesCount</div>
        </div>
    </div>

    <div class="mode-explanation">
        @if (AbsencesType == AbsenceCategory.UnexplainedPartials)
        {
            <h3>Unexplained Partial Absences</h3>
            <span>
                These absences are where a student was not present for a portion of a lesson. Students are sent an email requesting a reason for their absence, which is then forwarded to you for verification. You cannot verify these absences yet as the student has not provided the explanation.
            </span>
        }

        @if (AbsencesType == AbsenceCategory.UnverifiedPartials)
        {
            <h3>Unverified Partial Absences</h3>
            <span>
                These absences are where a student was not present for a portion of a lesson. Students have provided an reason for their absence, which is then forwarded to you for verification. Please review and verify or reject each explanation as appropriate.
            </span>
        }

        @if (AbsencesType == AbsenceCategory.UnexplainedWholes)
        {
            <h3>Unexplained Whole Absences</h3>
            <span>
                These absences are where a student was not present for an entire lesson. Parents are requested to provide an explanation for the absence, however if your school has received an explanation, please submit it here.
            </span>
        }
    </div>

    <div>
        <div class="mt-3">
            <GroupedDataTable Items="FilteredAbsences.GroupBy(student => student.StudentName).ToList()" TItem="OutstandingAbsencesForSchoolResponse" TKey="string">
                <TableHeader>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Period</th>
                    <th>Length</th>
                    <th>Class</th>
                    <th>Action</th>
                </TableHeader>
                <GroupRowTemplate Context="entry">
                    <td colspan="6">@entry.StudentName @entry.StudentGrade.AsName()</td>
                </GroupRowTemplate>
                <RowTemplate Context="entry">
                    <td>@entry.AbsenceDate.ToShortDateString()</td>
                    <td>@entry.AbsenceTimeframe</td>
                    <td>@entry.PeriodName (@entry.PeriodTimeframe)</td>
                    <td>@entry.AbsenceLength</td>
                    <td>@entry.OfferingName</td>
                    <td>
                        @if (AbsencesType == AbsenceCategory.UnverifiedPartials)
                        {
                            <button class="btn btn-info btn-show-hover" @onclick="() => GoToPartialVerification(entry.AbsenceId.Value, entry.AbsenceResponseId.Value)">Verify</button>
                        }
                        @if (AbsencesType == AbsenceCategory.UnexplainedWholes)
                        {
                            <button class="btn btn-info btn-show-hover" @onclick="() => GoToWholeExplanation(entry.AbsenceId.Value)">Explain</button>
                        }
                    </td>
                </RowTemplate>
            </GroupedDataTable>
        </div>
    </div>
</Loader>

@code {
    private bool IsLoading { get; set; } = false;

    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }

    private SchoolDto CurrentlySelectedSchool { get; set; }

    private int UnexplainedPartialsCount { get; set; }
    private int UnverifiedPartialsCount { get; set; }
    private int UnexplainedWholesCount { get; set; }

    private List<OutstandingAbsencesForSchoolResponse> Absences { get; set; } = new();
    private List<OutstandingAbsencesForSchoolResponse> FilteredAbsences { get; set; } = new();
    private AbsenceCategory AbsencesType { get; set; } = AbsenceCategory.UnverifiedPartials;

    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            ApiResult<List<OutstandingAbsencesForSchoolResponse>> absencesRequest = await Http.GetFromJsonAsync<ApiResult<List<OutstandingAbsencesForSchoolResponse>>>($"api/Absences/{SelectedSchool.Code}/All", cancellationTokenSource.Token);

            if (!absencesRequest.IsSuccess)
            {
                Console.WriteLine("Returned Failed Result Object");
                ModalParameters parameters = new() { { "Text", absencesRequest.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(absencesRequest.Error.Code, parameters, options);
                await modal.Result;

                IsLoading = false;

                return;
            }

            Absences = absencesRequest.Value;

            UnexplainedPartialsCount = Absences.Count(absence => absence.AbsenceTimeframe != absence.PeriodTimeframe && absence.AbsenceResponseId == null);
            UnverifiedPartialsCount = Absences.Count(absence =>  absence.AbsenceTimeframe != absence.PeriodTimeframe && absence.AbsenceResponseId != null);
            UnexplainedWholesCount = Absences.Count(absence => absence.AbsenceTimeframe == absence.PeriodTimeframe);

            FilterAbsences();
        }

        IsLoading = false;
    }

    void IDisposable.Dispose()
    {
        cancellationTokenSource.Cancel(false);
    }

    public enum AbsenceCategory
    {
        UnexplainedPartials,
        UnverifiedPartials,
        UnexplainedWholes
    }

    private void ChangeAbsenceType(AbsenceCategory type)
    {
        AbsencesType = type;

        FilterAbsences();
    }

    private void FilterAbsences()
    {
        switch (AbsencesType)
        {
            case AbsenceCategory.UnexplainedPartials:
                FilteredAbsences = Absences
                    .Where(absence => absence.AbsenceTimeframe != absence.PeriodTimeframe && absence.AbsenceResponseId == null)
                    .ToList();
                break;
            case AbsenceCategory.UnexplainedWholes:
                FilteredAbsences = Absences
                    .Where(absence => absence.AbsenceTimeframe == absence.PeriodTimeframe)
                    .ToList();
                break;
            case AbsenceCategory.UnverifiedPartials:
                FilteredAbsences = Absences
                    .Where(absence => absence.AbsenceTimeframe != absence.PeriodTimeframe && absence.AbsenceResponseId != null)
                    .ToList();
                break;
        }

        FilteredAbsences = FilteredAbsences
            .OrderBy(absence => absence.StudentGrade)
            .ThenBy(absence => absence.StudentName)
            .ToList();
    }

    private void GoToPartialVerification(Guid absenceId, Guid responseId)
    {
        NavigationManager.NavigateTo($"Absences/Partial/{absenceId}/Response/{responseId}/Verify");
    }

    private void GoToWholeExplanation(Guid absenceId)
    {
        NavigationManager.NavigateTo($"Absences/Whole/{absenceId}/Explain");
    }
}