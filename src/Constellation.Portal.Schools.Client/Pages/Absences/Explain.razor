@page "/Absences/Whole/{absenceId:guid}/Explain"

@using Constellation.Application.Absences.GetAbsenceDetailsForSchool;

@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService Modal

<Loader IsLoading="@IsLoading">
    <h1>Whole Absence Explanation</h1>

    <div>
        <EditForm Model="FormModel" OnValidSubmit="SubmitResponse">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 row">
                <label class="form-label col-md-2">Absence Date</label>
                <div class="col-md-6">@Absence?.AbsenceDate.ToShortDateString()</div>
            </div>

            <div class="mb-3 row">
                <label class="form-label col-md-2">Student Name</label>
                <div class="col-md-6">@Absence?.StudentName</div>
            </div>

            <div class="mb-3 row">
                <label class="form-label col-md-2">Class Name</label>
                <div class="col-md-6">@Absence?.ClassName</div>
            </div>

            <div class="mb-3 row">
                <label class="form-label col-md-2">Period Name</label>
                <div class="col-md-6">@Absence?.PeriodName</div>
            </div>

            <div class="mb-3 row">
                <label class="form-label col-md-2">Absence Timeframe</label>
                <div class="col-md-6">@Absence?.AbsenceTimeframe</div>
            </div>

            <div class="mb-3 row">
                <label class="form-label col-md-2">Comment</label>
                <div class="col-md-6">
                    <InputTextArea @bind-Value="FormModel.Comment" rows="5" cols="100" class="form-control" />
                </div>
            </div>

            <div class="mb-3 row">
                <div class="offset-1 col-md-3">
                    <button class="btn btn-success btn-block btn-lg" type="submit">Submit</button>
                </div>
            </div>
        </EditForm>
    </div>
</Loader>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    private SchoolDto CurrentlySelectedSchool { get; set; }

    private bool IsLoading { get; set; } = false;

    [Parameter]
    public Guid absenceId { get; set; }
    private Guid CurrentAbsenceId { get; set; }

    private SchoolAbsenceDetailsResponse Absence { get; set; }
    public AbsencesExplainFormModel FormModel { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        if (SelectedSchool != null && CurrentlySelectedSchool != SelectedSchool && CurrentlySelectedSchool == null)
        {
            CurrentlySelectedSchool = SelectedSchool;
        }

        if (SelectedSchool != null && CurrentlySelectedSchool != SelectedSchool && CurrentlySelectedSchool != null)
        {
            NavigationManager.NavigateTo("Absences");
        }

        if (absenceId != Guid.NewGuid())
        {
            if (absenceId != CurrentAbsenceId)
            {
                ApiResult<SchoolAbsenceDetailsResponse> absenceRequest = await Http.GetFromJsonAsync<ApiResult<SchoolAbsenceDetailsResponse>>($"api/Absences/Whole/{absenceId}");

                if (!absenceRequest.IsSuccess)
                {
                    Console.WriteLine("Returned Failed Result Object");
                    ModalParameters parameters = new() { { "Text", absenceRequest.Error!.Message } };

                    ModalOptions options = new()
                    {
                        Size = ModalSize.Automatic
                    };

                    IModalReference modal = Modal.Show<ErrorModal>(absenceRequest.Error.Code, parameters, options);
                    await modal.Result;

                    IsLoading = false;

                    return;
                }

                Absence = absenceRequest.Value;
            }

            CurrentAbsenceId = absenceId;
        }

        IsLoading = false;
    }

    private async Task SubmitResponse()
    {
        IsLoading = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        FormModel.AbsenceId = absenceId;
        FormModel.Username = authState.User.Identity.Name;

        HttpResponseMessage request = await Http.PostAsJsonAsync($"api/Absences/Whole/{absenceId}/Explain", FormModel);
        ApiResult response = await request.Content.ReadFromJsonAsync<ApiResult>();

        if (!response.IsSuccess)
        {
            Console.WriteLine("Returned Failed Result Object");
            ModalParameters parameters = new() { { "Text", response.Error!.Message } };

            ModalOptions options = new()
            {
                Size = ModalSize.Automatic
            };

            IModalReference modal = Modal.Show<ErrorModal>(response.Error.Code, parameters, options);
            await modal.Result;

            IsLoading = false;

            return;
        }
        else
        {
            ModalParameters parameters = new() { { "Text", "Absence explanation has been forwarded to our Administration Team. Thank you!" } };

            ModalOptions options = new()
            {
                Size = ModalSize.Automatic
            };

            IModalReference modal = Modal.Show<FeedbackModal>("Explanation Saved", parameters, options);
            await modal.Result;
        }

        NavigationManager.NavigateTo("Absences");

        IsLoading = false;
    }
}
