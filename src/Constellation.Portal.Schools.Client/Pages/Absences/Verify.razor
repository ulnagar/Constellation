@page "/Absences/Partial/{AbsenceId:guid}/Response/{ResponseId:guid}/Verify"

@using Constellation.Application.Absences.GetAbsenceResponseDetailsForSchool;
@using Constellation.Application.Absences.RejectStudentExplanation;
@using Constellation.Application.Absences.VerifyStudenExplanation;
@using Constellation.Core.Models.Identifiers;
@using Constellation.Portal.Schools.Client.Shared.Models;

@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<Loader IsLoading="@IsLoading">
    <h1>Partial Absence Verification</h1>

    <div>
        <div class="mb-3 row">
            <label class="form-label col-md-2">Absence Date</label>
            <div class="col-md-6">@Response?.AbsenceDate.ToShortDateString()</div>
        </div>

        <div class="mb-3 row">
            <label class="form-label col-md-2">Student Name</label>
            <div class="col-md-6">@Response?.StudentName</div>
        </div>

        <div class="mb-3 row">
            <label class="form-label col-md-2">Class Name</label>
            <div class="col-md-6">@Response?.ClassName</div>
        </div>

        <div class="mb-3 row">
            <label class="form-label col-md-2">Period Name</label>
            <div class="col-md-6">@Response?.PeriodName</div>
        </div>

        <div class="mb-3 row">
            <label class="form-label col-md-2">Absence Timeframe</label>
            <div class="col-md-6">@Response?.AbsenceTimeframe</div>
        </div>

        <div class="mb-3 row">
            <label class="form-label col-md-2">Explanation</label>
            <div class="col-md-6">@Response?.Explanation</div>
        </div>

        <div class="mb-3 row">
            <label class="form-label col-md-2">Comment</label>
            <div class="col-md-6">
                <textarea @bind="Comment" rows="5" cols="100" class="form-control"></textarea>
                <span class="text-danger">@CommentValidationText</span>
            </div>
        </div>

        <div class="mb-3 row">
            <div class="offset-1 col-md-3">
                <button class="btn btn-success btn-block btn-lg" @onclick="VerifyResponse">Verify</button>
            </div>
            <div class="offset-2 col-md-3">
                <button class="btn btn-warning btn-block btn-lg" @onclick="RejectResponse">Reject</button>
            </div>
        </div>
    </div>
</Loader>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    public SchoolDto CurrentlySelectedSchool { get; set; }

    private bool IsLoading { get; set; } = false;

    [Parameter]
    public Guid ResponseId { get; set; }
    public Guid CurrentResponseId { get; set; }

    [Parameter]
    public Guid AbsenceId { get; set; }

    public SchoolAbsenceResponseDetailsResponse Response { get; set; }

    public string Comment { get; set; }
    public string CommentValidationText { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        if (SelectedSchool != null && CurrentlySelectedSchool != SelectedSchool && CurrentlySelectedSchool == null)
        {
            CurrentlySelectedSchool = SelectedSchool;
        }

        if (SelectedSchool != null && CurrentlySelectedSchool != SelectedSchool && CurrentlySelectedSchool != null)
        {
            NavigationManager.NavigateTo("Absences");
        }

        if (ResponseId != Guid.NewGuid())
        {
            if (ResponseId != CurrentResponseId)
            {
                Response = await Http.GetFromJsonAsync<SchoolAbsenceResponseDetailsResponse?>($"api/Absences/Partial/{AbsenceId}/Response/{ResponseId}");

                Comment = "";
                CommentValidationText = "";    
            }

            CurrentResponseId = ResponseId;
        }

        IsLoading = false;
    }

    private async Task VerifyResponse()
    {
        IsLoading = true;

        CommentValidationText = "";

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        AbsenceResponseId responseId = AbsenceResponseId.FromValue(ResponseId);

        var command = new AbsencesVerifyFormModel()
        {
            AbsenceId = Response.AbsenceId.Value,
            ResponseId = responseId.Value,
            Username = authState.User.Identity.Name,
            Comment = Comment
        };

        await Http.PostAsJsonAsync<AbsencesVerifyFormModel>($"api/Absences/Partial/{AbsenceId}/Response/{ResponseId}/Verify", command);

        NavigationManager.NavigateTo("Absences");

        IsLoading = false;
    }

    private async Task RejectResponse()
    {
        IsLoading = true;

        CommentValidationText = "";

        if(string.IsNullOrWhiteSpace(Comment) || Comment.Length < 5)
        {
            CommentValidationText = "You must enter a comment to reject the students explanation for this absence!";
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        AbsenceResponseId responseId = AbsenceResponseId.FromValue(ResponseId);

        var command = new AbsencesVerifyFormModel()
        {
            AbsenceId = Response.AbsenceId.Value,
            ResponseId = responseId.Value,
            Username = authState.User.Identity.Name,
            Comment = Comment
        };

        await Http.PostAsJsonAsync<AbsencesVerifyFormModel>($"api/Absences/Partial/{AbsenceId}/Response/{ResponseId}/Reject", command);

        NavigationManager.NavigateTo("Absences");

        IsLoading = false;
    }
}
