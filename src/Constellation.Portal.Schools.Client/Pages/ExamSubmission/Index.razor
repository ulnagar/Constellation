@page "/Exams/"

@using Constellation.Application.Assignments.GetAssignmentsByCourse;
@using Constellation.Application.Assignments.UploadAssignmentSubmission;
@using Constellation.Application.Courses.GetCoursesForStudent
@using Constellation.Application.Students.GetStudentsFromSchoolForSelectionList
@using Constellation.Core.Models.Assignments.Identifiers;
@using Constellation.Core.Models.Subjects.Identifiers

@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager navManager
@inject IModalService Modal

<Loader IsLoading="@IsLoading">
    <h2>Exam Uploads</h2>

    <div class="row">
        <div class="col-6 border border-info">
            <div class="mb-3 row mt-3">
                <div class="col-3"><label>Student</label></div>
                <div class="col font-weight-bold">
                    <select class="form-control" @onchange="SelectNewStudent">
                        <option value="">-- Select --</option>
                        @foreach (var student in Students.OrderBy(student => student.CurrentGrade).ThenBy(student => student.LastName))
                        {
                            <option value="@student.StudentId" selected=@(SelectedStudent?.StudentId == student.StudentId)>(@student.CurrentGrade) @student.DisplayName</option>
                        }
                    </select>
                </div>
            </div>

            <div class="mb-3 row mt-3">
                <div class="col-3"><label>Course</label></div>
                <div class="col font-weight-bold">
                    @if (SelectedStudent == null)
                    {
                            
                    } 
                    else
                    {
                        <select class="form-control" @onchange="SelectNewCourse">
                            @if (SelectedCourse == null)
                            {
                                <option value="" selected>-- Select --</option>
                            } else
                            {
                                <option value="">-- Select --</option>
                            }
                            @foreach (var course in Courses)
                            {
                                <option value="@course.Id" selected=@(SelectedCourse?.Id == course.Id)>@course.DisplayName</option>
                            }
                        </select>
                    }
                </div>
            </div>

            <div class="mb-3 row mt-3">
                <div class="col-3"><label>Assignment</label></div>
                <div class="col font-weight-bold">
                    @if (SelectedCourse == null)
                    {
                            
                    } 
                    else
                    {
                        <select class="form-control" @onchange="SelectNewAssignment">
                            @if (SelectedAssignment == null)
                            {
                                <option value="" selected>-- Select --</option>
                            } else
                            {
                                <option value="">-- Select --</option>
                            }
                            @foreach (var assignment in Assignments)
                            {
                                <option value="@assignment.AssignmentId" selected=@(SelectedAssignment?.AssignmentId == assignment.AssignmentId)>@assignment.Name (Due: @assignment.DueDate.ToShortDateString())</option>
                            }
                        </select>
                    }
                </div>
            </div>

            <div class="mb-3 row mt-3">
                <div class="col-3"><label>File</label></div>
                <div class="col font-weight-bold">
                    <InputFile OnChange="UploadFile" disabled="@(SelectedAssignment == null)" />
                    <br />
                    <span class="text-danger">Maximum file upload size is 10Mb. Only PDF files are accepted.</span>
                </div>
            </div>
            <div class="mb-3 row">
                <div class="col">
                    <span class="text-danger">@Message</span>
                </div>
            </div>

            <div class="mb-3 row mt-3">
                <div class="col-3 col-offset-1">
                    <button type="submit" class="btn btn-primary" disabled="@(!OkToSubmit)" @onclick="SubmitForm">Submit</button>
                </div>
            </div>
        </div>
    </div>
</Loader>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }

    private SchoolDto CurrentlySelectedSchool { get; set; }

    private bool IsLoading { get; set; } = false;

    private List<StudentSelectionResponse> Students { get; set; } = new();

    private StudentSelectionResponse SelectedStudent { get; set; }

    private List<StudentCourseResponse> Courses { get; set; } = new();

    private StudentCourseResponse SelectedCourse { get; set; }

    private List<CourseAssignmentResponse> Assignments { get; set; } = new();

    private CourseAssignmentResponse SelectedAssignment { get; set; }

    private UploadAssignmentSubmissionCommand Command { get; set; }

    private IBrowserFile File { get; set; }

    private FileDto SelectedFile { get; set; } = new();

    private bool OkToSubmit = false;

    private string Message { get; set; }

    // Allow user to select:
    // 1. A Student
    // 2. A Course the student is enrolled in
    // 3. An Assessment from that course
    //
    // Then:
    // 4. Upload a file to be submitted to the assessment as the student

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            ApiResult<List<StudentSelectionResponse>> studentsRequest = await Http.GetFromJsonAsync<ApiResult<List<StudentSelectionResponse>>>($"api/Students/ForDropdown/{SelectedSchool.Code}");
            if (!studentsRequest.IsSuccess)
            {
                ModalParameters parameters = new() { { "Text", studentsRequest.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(studentsRequest.Error.Code, parameters, options);
                await modal.Result;

                IsLoading = false;

                return;
            }
            
            Students = studentsRequest.Value.OrderBy(student => student.CurrentGrade).ThenBy(student => student.LastName).ThenBy(student => student.FirstName).ToList();
        }

        IsLoading = false;
    }

    private async Task GetCoursesForSelectedStudent()
    {
        IsLoading = true;

        Courses = new List<StudentCourseResponse>();
        
        if (SelectedStudent != null)
        {
            var coursesRequest = await Http.GetFromJsonAsync<ApiResult<List<StudentCourseResponse>>>($"api/Exams/{SelectedStudent.StudentId}/Courses");

            if (!coursesRequest.IsSuccess)
            {
                ModalParameters parameters = new() { { "Text", coursesRequest.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(coursesRequest.Error.Code, parameters, options);
                await modal.Result;

                IsLoading = false;

                return;
            }

            if (coursesRequest.Value!.Count != 0)
            {
                Courses = coursesRequest.Value.OrderBy(course => course.Name).ToList();
            }
        }

        IsLoading = false;
    }

    private async Task GetAssignmentsForSelectedCourse()
    {
        if (SelectedCourse != null)
        {
            var assignmentsRequest = await Http.GetFromJsonAsync<ApiResult<List<CourseAssignmentResponse>>>($"api/Exams/{SelectedStudent.StudentId}/{SelectedCourse.Id}/Assignments/");
            if (!assignmentsRequest.IsSuccess)
            {
                ModalParameters parameters = new() { { "Text", assignmentsRequest.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(assignmentsRequest.Error.Code, parameters, options);
                await modal.Result;

                IsLoading = false;

                return;
            }
            
            Assignments = assignmentsRequest.Value.OrderBy(assignment => assignment.DueDate).ToList();
        } else
        {
            Assignments = new List<CourseAssignmentResponse>();
        }
    }

    private async Task SelectNewStudent(ChangeEventArgs e)
    {
        if (e.Value is null)
            return;

        string studentId = e.Value.ToString();

        SelectedStudent = Students.First(student => student.StudentId == studentId);

        await GetCoursesForSelectedStudent();

        SelectedCourse = null;

        SelectedAssignment = null;
    }

    private async Task SelectNewCourse(ChangeEventArgs e)
    {
        if (e.Value is null)
            return;

        bool convertSuccess = Guid.TryParse(e.Value.ToString(), out Guid paramGuid);

        if (!convertSuccess)
            return;

        var courseId = CourseId.FromValue(paramGuid);

        SelectedCourse = Courses.First(course => course.Id == courseId);

        SelectedAssignment = null;

        await GetAssignmentsForSelectedCourse();
    }

    private void SelectNewAssignment(ChangeEventArgs e)
    {
        if (e.Value is null)
            return;

        bool convertSuccess = Guid.TryParse(e.Value.ToString(), out Guid paramGuid);

        if (!convertSuccess)
            return;

        AssignmentId assignmentId = AssignmentId.FromValue(paramGuid);

        SelectedAssignment = Assignments.First(assignment => assignment.AssignmentId == assignmentId);

        // Show the upload box!
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        OkToSubmit = false;
        Message = "";

        foreach (var file in e.GetMultipleFiles(1))
        {
            File = file;
        }

        SelectedFile = new FileDto
        {
            FileName = File.Name,
            FileType = File.ContentType
        };

        try
        {
            long maxFileSize = 10485760;

            if (File.Size > maxFileSize)
            {
                var parameters = new ModalParameters();
                parameters.Add("Text", "The supplied file is too large. Files must be less than 10Mb each.");

                var modal = Modal.Show<FeedbackModal>("Submit Exam", parameters);
            }

            await using var target = new MemoryStream();
            await File.OpenReadStream(maxFileSize).CopyToAsync(target);
            SelectedFile.FileData = target.ToArray();
        }
        catch (Exception ex)
        {
            //Whats going on here?
            Console.WriteLine($"Exception thrown: {ex.Message}");
            Message = "An error has occurred uploading this file. Please check and try again!";
            return;
        }

        OkToSubmit = true;
    }

    private async Task SubmitForm()
    {
        Command = new(
            SelectedAssignment.AssignmentId,
            SelectedStudent.StudentId,
            SelectedFile);

        using HttpResponseMessage response = await Http.PostAsJsonAsync($"api/Exams/Upload", Command);
        ApiResult result = await response.Content.ReadFromJsonAsync<ApiResult>();

        if (result.IsSuccess)
        {
            navManager.NavigateTo("");
            return;
        }

        ModalParameters parameters = new() { { "Text", result.Error!.Message } };

        ModalOptions options = new()
        {
            Size = ModalSize.Automatic
        };

        IModalReference modal = Modal.Show<ErrorModal>(result.Error.Code, parameters, options);
        await modal.Result;
        
        OkToSubmit = false;
    }
}