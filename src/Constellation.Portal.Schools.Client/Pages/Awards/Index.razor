@page "/Awards/"

@    using Constellation.Application.Features.Portal.School.Home.Models;
@    using Constellation.Application.Awards.GetSummaryForStudent;
@    using Constellation.Core.Models.Identifiers;
    using Constellation.Application.Students.GetStudentsFromSchoolForSelectionList;

@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<Loader IsLoading="@IsLoading">
    <h2>Student Awards</h2>

    <div>
        <div class="mt-3">

            <div class="mb-3 row mt-3">
                <div class="col-3"><label>Student</label></div>
                <div class="col font-weight-bold">
                    <select class="form-control" @onchange="SelectNewStudent">
                        <option value="">-- Select --</option>
                        @foreach (var student in Students.OrderBy(student => student.CurrentGrade).ThenBy(student => student.LastName))
                        {
                            <option value="@student.StudentId" selected=@(SelectedStudent?.StudentId == student.StudentId)>(@student.CurrentGrade) @student.DisplayName</option>
                        }
                    </select>
                </div>
            </div>

            <div class="row mt-3">
                <h4>Award Tally</h4>

                <div class="p-2 ms-1 me-1 mb-2 position-relative border border-2 rounded-3">
                    <span class="row d-flex align-items-center">
                        @*Display as flex to enable vertical centering of the button in the second div*@
                        <div class="fa-icon-sizing">
                            <i class="fad fa-star-shooting fa-3x app-theme"></i>
                        </div>
                        <div class="col">
                            <div class="h4">@AwardSummary.Astras Astra awards</div>
                            <span class="fst-italic">Astra awards are given out by classroom teachers.</span>
                        </div>
                    </span>
                </div>

                <div class="p-2 ms-1 me-1 mb-2 position-relative border border-2 rounded-3">
                    <span class="row d-flex align-items-center">
                        @*Display as flex to enable vertical centering of the button in the second div*@
                        <div class="fa-icon-sizing">
                            <i class="fad fa-star-christmas fa-3x app-theme"></i>
                        </div>
                        <div class="col">
                            <div class="h4">@AwardSummary.Stellars Stellar awards</div>
                            <span class="fst-italic">5 Astra awards = 1 Stellar award.</span>
                        </div>
                    </span>
                </div>

                <div class="p-2 ms-1 me-1 mb-2 position-relative border border-2 rounded-3">
                    <span class="row d-flex align-items-center">
                        @*Display as flex to enable vertical centering of the button in the second div*@
                        <div class="fa-icon-sizing">
                            <i class="fad fa-solar-system fa-3x app-theme"></i>
                        </div>
                        <div class="col">
                            <div class="h4">@AwardSummary.Galaxies Galaxy medals</div>
                            <span class="fst-italic">5 Stellar awards = 1 Galaxy Medal.</span>
                        </div>
                    </span>
                </div>

                <div class="p-2 ms-1 me-1 mb-2 position-relative border border-2 rounded-3">
                    <span class="row d-flex align-items-center">
                        @*Display as flex to enable vertical centering of the button in the second div*@
                        <div class="fa-icon-sizing">
                            <i class="fad fa-galaxy fa-3x app-theme"></i>
                        </div>
                        <div class="col">
                            <div class="h4">@AwardSummary.Universals Universal Achiever awards</div>
                            <span class="fst-italic">5 Galaxy medals = 1 Universal Achiever award.</span>
                        </div>
                    </span>
                </div>
            </div>

            <div class="row mt-3">
                <h4>Recent Award List</h4>

                @foreach (var award in AwardSummary.RecentAwards.OrderByDescending(award => award.AwardedOn).ToList())
                {
                    <div class="p-2 ms-1 me-1 mb-2 position-relative border border-2 rounded-3">
                        <span class="row d-flex align-items-center">
                            <div class="col">
                                <div class="h4">@award.Type</div>
                                @if (!string.IsNullOrEmpty(award.AwardedBy))
                                {
                                    <span class="fst-italic d-block">Awarded By @award.AwardedBy</span>
                                }

                                @if (!string.IsNullOrEmpty(award.AwardedFor))
                                {
                                    <span class="fst-italic d-block">For @award.AwardedFor</span>
                                }

                                <span class="fst-italic d-block">On @award.AwardedOn.ToShortDateString()</span>
                            </div>
                            @if (award.HasCertificate)
                            {
                                <div class="fa-icon-sizing">
                                    <a @onclick="() => Download(award.AwardId)" href="javascript:void(0)" class="stretched-link">
                                        <i class="fad fa-file-download fa-3x app-theme"></i>
                                    </a>
                                </div>
                            }
                        </span>
                    </div>
                }
            </div>

        </div>
    </div>
</Loader>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    public SchoolDto CurrentlySelectedSchool { get; set; }

    private bool IsLoading { get; set; } = false;

    public ICollection<StudentFromSchoolForDropdownSelection> Students { get; set; } = new List<StudentFromSchoolForDropdownSelection>();
    public StudentFromSchoolForDropdownSelection SelectedStudent { get; set; }

    public StudentAwardSummaryResponse AwardSummary { get; set; } = new(0, 0, 0, 0, new());

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            var students = await Http.GetFromJsonAsync<List<StudentFromSchoolForDropdownSelection>>($"api/Students/ForDropdown/{SelectedSchool.Code}");

            Students = students.OrderBy(student => student.CurrentGrade).ThenBy(student => student.LastName).ThenBy(student => student.FirstName).ToList();

            SelectedStudent = null;
        }

        IsLoading = false;
    }

    private async Task SelectNewStudent(ChangeEventArgs e)
    {
        var studentId = e.Value.ToString();

        if (string.IsNullOrWhiteSpace(studentId))
        {
            // The blank --Select-- option has been selected. Blank out data.
            SelectedStudent = null;
        } else
        {
            SelectedStudent = Students.First(student => student.StudentId == studentId);
        }

        await GetAwardsForSelectedStudent();
    }

    private async Task GetAwardsForSelectedStudent()
    {
        IsLoading = true;

        if (SelectedStudent != null)
        {
            AwardSummary = await Http.GetFromJsonAsync<StudentAwardSummaryResponse>($"api/Awards/ForStudent/{SelectedStudent.StudentId}");
        }

        IsLoading = false;
    }

    async Task Download(StudentAwardId awardId)
    {
        Console.WriteLine($"Tried to download {awardId}, {awardId.ToString()}");

        try
        {
            IsLoading = true;

            var response = await Http.PostAsJsonAsync($"api/Awards/ForStudent/{SelectedStudent.StudentId}/Download/{awardId.ToString()}", new { });
            // This returns the file in the response variable.
            // Need to push it to the browser as a file download, possibly using JS
            // https://docs.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-6.0

            if (response.IsSuccessStatusCode)
            {
                var fileStream = response.Content.ReadAsStream();
                var award = AwardSummary.RecentAwards.First(award => award.AwardId == awardId);
                var filename = $"{SelectedStudent.DisplayName} - Astra Award - {award.AwardedOn:dd-MM-yyyy} - {award.IncidentId}.pdf";

                using var streamRef = new DotNetStreamReference(stream: fileStream);

                await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsLoading = false;
        }
    }
}
