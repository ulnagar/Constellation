@page "/Timetables/View/{StudentId}"

@using Constellation.Application.Extensions;
@using System.Net.Mime

@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IModalService Modal

<Loader IsLoading="@IsLoading">
    <h2>Student Timetables</h2>

    <div class="d-flex flex-row mt-3 mb-3">
        <button @onclick="Download" class="btn btn-primary">Download</button>

        <a href="Timetables" class="btn btn-danger btn-pull-right">Go Back</a>
    </div>

    <hr />

    @StudentTimetableData.StudentName <br/>
    @StudentTimetableData.StudentGrade <br />
    @StudentTimetableData.StudentSchool

    <div>
        @{
            IEnumerable<IGrouping<string, StudentTimetableDataDto.TimetableData>> timetables = new List<IGrouping<string, StudentTimetableDataDto.TimetableData>>();
            if (StudentTimetableData.Timetables != null)
            {
                timetables = StudentTimetableData.Timetables.OrderBy(data => data.TimetableName).GroupBy(data => data.TimetableName);
            }

            @foreach (var block in timetables)
            {
                var dayList = block.Select(data => data.Day).Distinct().ToList();
                var weekList = dayList.Max();
                var numWeeks = weekList / 5;
                int currentDay = 1;
                int currentWeek = 1;

                <div>
                    @for (currentWeek = 1; currentWeek <= numWeeks; currentWeek++)
                    {
                        <div class="Timetable-Week">
                            <div class="Timetable-Day">
                                <div class="Timetable-Day-Title"></div>
                                @foreach (var period in block.Where(data => data.Day == currentDay).OrderBy(data => data.StartTime))
                                {
                                    var style = "";

                                    if (period.Type == "Other")
                                    {
                                        style += " Other";
                                    }

                                    if (period.Type == "Break")
                                    {
                                        style += " Break";
                                    }

                                    <div class="Timetable-Day-Period @style">
                                        @period.Name<br />
                                        @period.StartTime.As12HourTime() - @period.EndTime.As12HourTime()
                                    </div>
                                }
                            </div>

                            @for (currentDay = (((currentWeek -1) * 5) + 1); currentDay <= currentWeek * 5 && currentDay > (currentWeek -1) * 5; currentDay++)
                            {
                                <div class="Timetable-Day">
                                    <div class="Timetable-Day-Title">
                                        @{
                                            var weekName = currentWeek switch
                                            {
                                                1 => "Week A",
                                                2 => "Week B",
                                                3 => "Week C",
                                                4 => "Week D",
                                                _ => ""
                                            };

                                            var dayName = currentDay switch
                                            {
                                                1 or 6 or 11 or 16 => "Monday",
                                                2 or 7 or 12 or 17 => "Tuesday",
                                                3 or 8 or 13 or 18 => "Wednesday",
                                                4 or 9 or 14 or 19 => "Thursday",
                                                5 or 10 or 15 or 20 => "Friday",
                                                _ => ""
                                            };
                                        }
                                        @weekName - @dayName
                                    </div>
                                    @foreach (var period in block.Where(data => data.Day == currentDay).OrderBy(data => data.StartTime))
                                    {
                                        var style = "";

                                        if (string.IsNullOrWhiteSpace(period.ClassName))
                                        {
                                            style += " Inactive";
                                        } else
                                        {
                                            style += " Active";
                                        }

                                        if (period.Type == "Break")
                                        {
                                            style += " Break";
                                        }
                                    
                                        <div class="Timetable-Day-Period @style">
                                            @if (!string.IsNullOrWhiteSpace(period.ClassName))
                                            {
                                                    @period.ClassName<br />
                                                    @period.ClassTeacher
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</Loader>

@code {
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    public SchoolDto CurrentlySelectedSchool { get; set; }

    private bool IsLoading { get; set; } = false;

    [Parameter]
    public string StudentId { get; set; }

    public StudentTimetableDataDto StudentTimetableData { get; set; } = new StudentTimetableDataDto();

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        if (SelectedSchool != null && CurrentlySelectedSchool != SelectedSchool && CurrentlySelectedSchool == null)
        {
            CurrentlySelectedSchool = SelectedSchool;

            var timetableRequest = await Http.GetFromJsonAsync<ApiResult<StudentTimetableDataDto>>($"api/Timetables/ForStudent/{StudentId}");
            if (!timetableRequest.IsSuccess)
            {
                ModalParameters parameters = new() { { "Text", timetableRequest.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(timetableRequest.Error.Code, parameters, options);
                await modal.Result;

                IsLoading = false;

                return;
            }
        }

        if (SelectedSchool != null && CurrentlySelectedSchool != SelectedSchool && CurrentlySelectedSchool != null)
        {
            NavigationManager.NavigateTo("Timetables");
        }

        IsLoading = false;
    }

    private async Task Download()
    {
        try
        {
            IsLoading = true;

            HttpResponseMessage response = await Http.PostAsJsonAsync($"api/Timetables/Download", StudentId);
            IEnumerable<string> contentType = response.Content.Headers.GetValues("Content-Type").ToList();

            if (contentType.Any(entry => entry.Contains(MediaTypeNames.Application.Json)))
            {
                ApiResult result = await response.Content.ReadFromJsonAsync<ApiResult>();

                ModalParameters parameters = new() { { "Text", result.Error!.Message } };

                ModalOptions options = new()
                    {
                        Size = ModalSize.Automatic
                    };

                IModalReference modal = Modal.Show<ErrorModal>(result.Error.Code, parameters, options);
                await modal.Result;

                return;
            }

            // This returns the file in the response variable.
            // Need to push it to the browser as a file download, possibly using JS
            // https://docs.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-6.0

            var fileStream = response.Content.ReadAsStream();
            var fileName = $"{StudentTimetableData.StudentName} - Timetable.pdf";

            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsLoading = false;
        }
    }
}