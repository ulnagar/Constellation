@page "/"

@attribute [Authorize]

@inject HttpClient Http
@inject IModalService Modal

<Loader IsLoading="@IsLoading">
    <h1>Aurora College Schools Portal</h1>

    @foreach (var group in Students.GroupBy(student => student.CurrentGrade))
    {
        var yearTitle = $"Year {(int)group.Key}";

        <TitleDivider Title="@yearTitle" />

        <div class="flex-row">
            @foreach (var student in group)
            {
                <StudentCard Student="student" />
            }
        </div>
    }
</Loader>

@code{
    [CascadingParameter]
    public SchoolDto SelectedSchool { get; set; }
    private SchoolDto CurrentlySelectedSchool { get; set; }

    private bool IsLoading { get; set; } = false;

    private List<StudentDto> Students { get; set; } = new List<StudentDto>();

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        if (SelectedSchool != null && SelectedSchool != CurrentlySelectedSchool)
        {
            CurrentlySelectedSchool = SelectedSchool;

            var studentsRequest = await Http.GetFromJsonAsync<ApiResult<List<StudentDto>>>($"api/Students/FromSchool/{SelectedSchool.Code}");
            if (!studentsRequest.IsSuccess)
            {
                ModalParameters parameters = new() { { "Text", studentsRequest.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(studentsRequest.Error.Code, parameters, options);
                await modal.Result;

                IsLoading = false;

                return;
            }
            
            
            Students = studentsRequest.Value
                .OrderBy(student => student.CurrentGrade)
                .ThenBy(student => student.LastName)
                .ThenBy(student => student.FirstName)
                .ToList();    
        }

        IsLoading = false;
    }
}