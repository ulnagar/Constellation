@namespace Constellation.Portal.Schools.Client.Components

@using Constellation.Application.Stocktake.GetStocktakeSightingsForSchool
@using Constellation.Application.Stocktake.CancelSighting

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (error)
{
    <div class="row">
        <div class="col w-auto">
            <div class="mb-3 row mt-3">
                <div class="col">@errorText</div>
            </div>

            <div class="row mt-3">
                <div class="ms-auto me-3">
                    <button class="btn btn-danger" @onclick="@ErrorCancel">Ok</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row m-3">
        <div class="col w-auto">
            <div class="MB-3 row mt-3">
                <label class="form-label col-5">Serial / Asset</label>
                <div class="col font-weight-bold">@Sighting.SerialNumber / @Sighting.AssetNumber</div>
            </div>

            <div class="mb-3 row mt-3">
                <label class="form-label col-5">Description</label>
                <div class="col font-weight-bold">@Sighting.Description</div>
            </div>

            <div class="mb-3 row mt-3">
                <label class="form-label col-5">User</label>
                <div class="col font-weight-bold">@Sighting.UserName</div>
            </div>

            <div class="mb-3 row mt-3">
                <label class="form-label col-5">Sighted</label>
                <div class="col font-weight-bold">@Sighting.SightedBy (@Sighting.SightedAt.ToShortDateString())</div>
            </div>

            <EditForm Model="comment">
                <DataAnnotationsValidator />

                <div class="mb-3 row mt-3">
                    <label class="form-label col-5">Reason for cancelling</label>
                    <div class="col">
                        <InputText @bind-Value="comment" class="form-control" />
                    </div>
                    <div class="w-100"></div>
                    <div class="offset-5 col">
                        &nbsp;
                        @if (showValidationMessage)
                        {
                            <span class="text-danger">You must provide a reason for cancelling this sighting!</span>
                        }
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="ms-auto me-3">
                        <button class="btn btn-primary me-3" @onclick="@CancelSighting">Update</button>
                        <button class="btn btn-danger" @onclick="@Cancel">Close</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [CascadingParameter] public BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public StocktakeSightingResponse Sighting { get; set; }

    private bool showValidationMessage = false;
    private bool error = false;
    private string errorText = string.Empty;
    private string comment { get; set; }

    async Task CancelSighting()
    {
        if (string.IsNullOrWhiteSpace(comment))
        {
            showValidationMessage = true;
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        CancelSightingCommand command = new(
            Sighting.Id,
            comment,
            authState.User.Identity.Name,
            DateTime.Now);

        HttpResponseMessage response = await Http.PostAsJsonAsync($"api/Stocktake/{Sighting.Id}/Remove", command);
        ApiResult result = await response.Content.ReadFromJsonAsync<ApiResult>();

        if (!result.IsSuccess)
        {
            error = true;
            errorText = result.Error!.Message;

            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok(true));
    }

    async Task ErrorCancel()
    {
        error = false;
        errorText = string.Empty;
    }

    async Task Cancel()
    {
        await BlazoredModal.CloseAsync(ModalResult.Cancel());
    }
}
