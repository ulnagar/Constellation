@inherits LayoutComponentBase

@inject HttpClient Http
@inject NavigationManager NavManager
@inject SignOutSessionStateManager SignOutManager

@using Constellation.Application.DTOs;
@using System.Security.Claims;

<CascadingValue Value="@SelectedSchool">
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4 text-right">
                <div class="col-md-8">
                    @if (ShowChangeSchoolBox)
                    {
                        <select class="form-control" @onchange="ChangeSchool" @onblur="RestoreSchoolLabel">
                            @foreach (var school in Schools.OrderBy(school => school.Name))
                            {
                                var selected = SelectedSchool.Code == school.Code;
                                <option value="@school.Code" selected="@selected">@school.Code - @school.Name</option>
                            }
                        </select>
                    }
                    else
                    {
                        @:School: @SelectedSchool?.Name
                        @if (Schools.Count > 1)
                        {
                            <button class="btn btn-sm btn-secondary ms-4" @onclick="ToggleChangeSchoolBox">Change School</button>
                        }
                    }
                </div>
                <div class="col">
                    @if (User is not null && User.Identity is not null && User.Identity.IsAuthenticated)
                    {
                        <span>Welcome!</span>
                        <a class="btn btn-sm btn-warning ml-4" @onclick="Logout">Log Out</a>
                    }
                    else
                    {
                        <a class="btn btn-sm btn-success ml-4" @onclick="Login">Log In</a>
                    }
                </div>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</CascadingValue>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private SchoolDto SelectedSchool { get; set; }
    private List<SchoolDto> Schools { get; set; } = new();

    private bool ShowChangeSchoolBox = false;
    private ClaimsPrincipal User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        User = authState.User;

        if (User.Identity.IsAuthenticated)
        {
            Schools = await Http.GetFromJsonAsync<List<SchoolDto>>($"api/Schools");
            SelectedSchool = Schools.OrderBy(school => school.Code).First();
        }
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    var authState = await authenticationStateTask;
    //    User = authState.User;

    //    if (!User.Identity.IsAuthenticated)
    //    {
    //        // Redirect to login page
    //        NavManager.NavigateTo("/authentication/LogOut");
    //    }
    //}

    private void ToggleChangeSchoolBox()
    {
        ShowChangeSchoolBox = true;
    }

    private void RestoreSchoolLabel()
    {
        ShowChangeSchoolBox = false;
    }

    private void ChangeSchool(ChangeEventArgs e)
    {
        var schoolCode = e.Value.ToString();
        SelectedSchool = Schools.First(school => school.Code == schoolCode);

        ShowChangeSchoolBox = false;
    }

    private async Task Logout()
    {
        await SignOutManager.SetSignOutState();
        NavManager.NavigateTo("authentication/logout");
    }

    private void Login()
    {
        NavManager.NavigateTo("/authentication/LogIn");
    }
}