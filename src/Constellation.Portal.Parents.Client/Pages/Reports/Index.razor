@page "/Reports/"

@using Constellation.Application.Reports.GetAcademicReportList;
@using Constellation.Application.Students.GetStudentsByParentEmail;

@inject HttpClient Http
@inject IJSRuntime JS
@inject IModalService Modal

@attribute [Authorize]

<Loader IsLoading="ShowLoader">
    <h2>Reports</h2>

    @if (SelectingStudent)
    {
        // Show list of students in boxes to allow them to select a different student
        <h4>Select student to display:</h4>
        <ul class="list-group">
            @foreach (var student in Students)
            {
                <button class="list-group-item list-group-item-action @(student == SelectedStudent ? "active" : "")" @onclick="() => SelectNewStudent(student)">
                    @student.DisplayName (@student.CurrentGrade)
                </button>
            }
        </ul>
    }
    else
    {
        <div class="w-auto p-2 ms-1 me-1 mb-2 position-relative border border-2 rounded-3">
            <span class="row d-flex align-items-center">
                @*Display as flex to enable vertical centering of the button in the second div*@
                <div class="col-lg">
                    <div class="h4">Reports for @SelectedStudent.DisplayName</div>
                    @*If the view has collapsed and the button below is hidden, turn the entire entry into a clickable element*@
                    @if (Students.Count > 1)
                    {
                        <span class="fst-italic">Click or tap to change</span>

                        <div class="d-block">
                            <a @onclick="EnableStudentSelection" href="javascript:void(0)" class="stretched-link"></a>
                        </div>
                    }
                </div>
            </span>
        </div>

        <div class="d-flex flex-column justify-content-around">
            <div class="accordion accordion-flush" id="accordion">

                @foreach (var group in Reports.GroupBy(report => report.Year).OrderByDescending(group => group.Key))
                {
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="accordion-header-@group.Key">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#accordion-item-@group.Key" aria-expanded="false" aria-controls="accordion-item-@group.Key">
                                    @group.Key
                            </button>
                        </h2>
                        <div id="accordion-item-@group.Key" class="accordion-collapse collapse" aria-labelledby="accordion-header-@group.Key" data-bs-parent="#accordion">
                            <div class="accordion-body">
                                @foreach (var entry in group.OrderBy(report => Convert.ToInt32(report.PublishId)))
                                {
                                    <div class="w-auto p-3 mb-2 shadow position-relative">
                                        <div class="row d-flex align-items-center">
                                            @*Display as flex to enable vertical centering of the button in the second div*@
                                            <div class="col-lg-8">
                                                <div class="h5">@entry.ReportingPeriod</div>
                                                
                                                @*Turn the entire entry into a clickable element*@
                                                <span class="fst-italic">Click or tap to download</span>

                                                <div class="d-block">
                                                    <a @onclick="() => DownloadReport(entry)" href="javascript:void(0)" class="stretched-link"></a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</Loader>

@code {
    private List<StudentResponse> Students { get; set; } = new();
    private StudentResponse SelectedStudent { get; set; }
    private List<AcademicReportResponse> Reports { get; set; } = new();

    public bool ShowLoader = false;
    private bool SelectingStudent = false;

    protected override async Task OnParametersSetAsync()
    {
        ShowLoader = true;

        try
        {
            var studentsRequest = await Http.GetFromJsonAsync<ApiResult<List<StudentResponse>>>($"Students");

            if (!studentsRequest.IsSuccess)
            {
                Console.WriteLine("Returned Failed Result Object");
                ModalParameters parameters = new() { { "Text", studentsRequest.Error!.Message } };

                ModalOptions options = new()
                {
                    Size = ModalSize.Automatic
                };

                IModalReference modal = Modal.Show<ErrorModal>(studentsRequest.Error.Code, parameters, options);
                await modal.Result;

                ShowLoader = false;

                return;
            }

            Students = studentsRequest.Value.OrderBy(student => student.CurrentGrade).ToList();

            if (Students.Count == 1)
            {
                SelectedStudent = Students.First();
                await GetStudentReports();
            }

            if (Students.Count > 1)
            {
                SelectingStudent = true;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        ShowLoader = false;
    }

    async Task GetStudentReports()
    {
        try
        {
            Reports = await Http.GetFromJsonAsync<List<AcademicReportResponse>>($"Reports/Student/{SelectedStudent.StudentId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void EnableStudentSelection()
    {
        SelectingStudent = true;
    }

    async void SelectNewStudent(StudentResponse student)
    {
        ShowLoader = true;

        SelectedStudent = student;
        SelectingStudent = false;

        await GetStudentReports();

        ShowLoader = false;

        StateHasChanged();
    }

    async Task DownloadReport(AcademicReportResponse reportEntry)
    {
        try
        {
            ShowLoader = true;

            var response = await Http.PostAsJsonAsync($"Reports/Student/{SelectedStudent.StudentId}/Download/{reportEntry.Id}", new { });
            // This returns the file in the response variable.
            // Need to push it to the browser as a file download, possibly using JS
            // https://docs.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-6.0

            if (response.IsSuccessStatusCode)
            {
                var fileStream = response.Content.ReadAsStream();
                var fileName = $"Academic Report - {SelectedStudent.DisplayName} - {reportEntry.ReportingPeriod}.pdf";

                using var streamRef = new DotNetStreamReference(stream: fileStream);

                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            ShowLoader = false;
        }
    }
}
