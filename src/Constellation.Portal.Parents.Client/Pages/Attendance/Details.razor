@page "/Attendance/Absences/Details/{id:guid}"

@using Constellation.Application.Absences.GetAbsenceDetailsForParent;
@using Constellation.Application.Absences.ProvideParentWholeAbsenceExplanation;
@using Constellation.Core.Models.Identifiers;
@using Constellation.Portal.Parents.Client.Shared.Models;

@inject HttpClient Http
@inject NavigationManager navManager
@inject IModalService Modal

@attribute [Authorize]

<Loader IsLoading="ShowLoader">
    <div class="d-grid gap-2 d-block d-sm-block d-md-block d-lg-none d-xl-none d-xxl-none mb-1">
        <a href="attendance/absences" class="btn btn-primary"><i class="fas fa-long-arrow-left" /> Go Back</a>
    </div>

    <div class="d-none d-lg-block d-xl-block d-xxl-block mb-1">
        <a href="attendance/absences" class="btn btn-primary"><i class="fas fa-long-arrow-left" /> Go Back</a>
    </div>

    <h2>@Absence.Type for @Absence.Student</h2>

    <EditForm Model="FormModel" OnValidSubmit="SubmitResponse">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-3">
            <div class="mb-2 col-md-2">
                <strong>Status</strong>
            </div>
            <div class="mb-2 col-md-10">
                @if (Absence.Type == wholeAbsence)
                {
                    @if (Absence.Explained)
                    {
                        <span><i class="fas fa-check"/> Explained Whole Absence</span>
                    }
                    else
                    {
                        <span><i class="fas fa-exclamation"/> Unexplained Whole Absence</span>
                    }
                }

                @if (Absence.Type == partialAbsence)
                {
                    @if (Absence.Explained && Absence.Reason != "Absent" && Absence.VerificationStatus != notRequiredResponse)
                    {
                        <span><i class="fas fa-check"/> Explained Partial Absence via @Absence.AbsenceReason</span>
                    }
                    else if (Absence.Explained && Absence.VerificationStatus == notRequiredResponse)
                    {
                        <span><i class="fas fa-check"/> Explained Partial Absence</span>
                    }
                    else if (Absence.VerificationStatus == verifiedResponse)
                    {
                        <span><i class="fas fa-check"/> @Absence.VerificationStatus Partial Absence</span>
                    }
                    else if (Absence.VerificationStatus == rejectedResponse)
                    {
                        <span><i class="fas fa-exclamation"/> @Absence.VerificationStatus Partial Absence</span>
                    }
                    else if (Absence.VerificationStatus == pendingResponse)
                    {
                        <span><i class="fas fa-question"/> @Absence.VerificationStatus Partial Absence</span>
                    }
                    else
                    {
                        <span><i class="fas fa-exclamation"/> Unexplained Partial Absence</span>
                    }
                }
            </div>
        </div>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-1">
            <div class="mb-2 col-md-2">
                <strong>Date</strong>
            </div>
            <div class="mb-2 col-md-10">
                <span>@Absence.Date.ToShortDateString()</span>
            </div>
        </div>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-1">
            <div class="mb-2 col-md-2">
                <strong>Class</strong>
            </div>
            <div class="mb-2 col-md-10">
                <span>@Absence.OfferingName</span>
            </div>
        </div>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-1">
            <div class="mb-2 col-md-2">
                <strong>Absence</strong>
            </div>
            <div class="mb-2 col-md-10">
                <span>@Absence.AbsenceTimeframe</span>
            </div>
        </div>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-1">
            <div class="mb-2 col-md-2">
                <strong>Explanation</strong>
            </div>
            <div class="mb-2 col-md-10">
                @if (Absence.Type == wholeAbsence)
                {
                    @if (Absence.Explained || !Absence.CanBeExplainedByParent)
                    {
                        <span>"@Absence.Reason"</span>
                    }
                    else
                    {
                        <InputTextArea @bind-Value="FormModel.Comment" rows="5" cols="100" class="form-control"/>
                        <ValidationMessage For="() => FormModel.Comment"></ValidationMessage>
                    }
                }

                @if (Absence.Type == partialAbsence)
                {
                    @if (Absence.Explained && Absence.AbsenceReason != "Absent")
                    {
                        <span>
                            @Absence.AbsenceReason
                        </span>
                    }
                    else if (Absence.Explained && Absence.VerificationStatus == notRequiredResponse)
                    {
                        <span>
                            @Absence.Reason<br/>
                            @Absence.ValidatedBy
                        </span>
                    }
                    else if (Absence.Explained)
                    {
                        <span>
                            "@Absence.Reason"<br/>
                            @Absence.VerificationStatus by @Absence.ValidatedBy
                        </span>
                    }
                    else if (Absence.VerificationStatus == pendingResponse)
                    {
                        <span>
                            "@Absence.Reason"<br/>
                            Pending verification by Aurora College Coordinator
                        </span>
                    }
                    else
                    {
                        <span>Pending explanation by @Absence.Student</span>
                    }
                }
            </div>
        </div>

        @if (Absence.Type == wholeAbsence && !Absence.Explained && Absence.CanBeExplainedByParent)
        {
            <div class="d-grid gap-2 d-block d-sm-block d-md-block d-lg-none d-xl-none d-xxl-none mt-1">
                <button class="btn btn-success btn-lg" type="submit">Submit</button>
            </div>

            <div class="d-none d-lg-block d-xl-block d-xxl-block mt-1">
                <button class="btn btn-success btn-lg" type="submit">Submit</button>
            </div>
        }
    </EditForm>
    
    @if (Error is not null)
    {
        
    }
</Loader>
@code {
    [Parameter] public Guid Id { get; set; }

    public bool ShowLoader { get; set; } = false;

    ParentAbsenceDetailsResponse Absence { get; set; }
    public AttendanceDetailsFormModel FormModel { get; set; } = new();

    string wholeAbsence = "Whole Absence";
    string partialAbsence = "Partial Absence";
    string pendingResponse = "Pending";
    string verifiedResponse = "Verified";
    string rejectedResponse = "Rejected";
    string notRequiredResponse = "NR";

    Error Error { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        ShowLoader = true;

        try
        {
            var absenceRequest = await Http.GetFromJsonAsync<ApiResult<ParentAbsenceDetailsResponse>>($"Attendance/Details/{Id}");

            if (!absenceRequest.IsSuccess)
            {
                Console.WriteLine("Returned Failed Result Object");
                var parameters = new ModalParameters();
                parameters.Add("Text", absenceRequest.Error!.Message);

                var options = new ModalOptions()
                {
                    Size = ModalSize.Automatic
                };

                var modal = Modal.Show<ErrorModal>(absenceRequest.Error.Code, parameters, options);
                await modal.Result;

                ShowLoader = false;

                return;
            }

            Absence = absenceRequest.Value;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        FormModel.AbsenceId = Id;

        ShowLoader = false;
    }

    async Task SubmitResponse()
    {
        if (Absence.CanBeExplainedByParent)
        {
            AbsenceId absenceId = AbsenceId.FromValue(Id);

            ProvideParentWholeAbsenceExplanationCommand Command = new(
                absenceId,
                FormModel.Comment);
                
            HttpResponseMessage response = await Http.PostAsJsonAsync($"Attendance/ParentExplanation", Command);
            ApiResult result = await response.Content.ReadFromJsonAsync<ApiResult>();

            if (!result.IsSuccess)
            {
                Console.WriteLine("Returned Failed Result Object");
                var parameters = new ModalParameters();
                parameters.Add("Text", result.Error!.Message);

                var options = new ModalOptions()
                {
                    Size = ModalSize.Automatic
                };

                var modal = Modal.Show<ErrorModal>(result.Error.Code, parameters, options);
                await modal.Result;

                return;
            }
        }

        navManager.NavigateTo("Attendance/Absences");
    }
}
