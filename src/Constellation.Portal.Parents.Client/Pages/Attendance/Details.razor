@page "/Attendance/Absences/Details/{id:guid}"

@using Constellation.Application.Absences.GetAbsenceDetailsForParent;
@using Constellation.Application.Absences.ProvideParentWholeAbsenceExplanation;
@using Constellation.Core.Models.Absences;
@using Constellation.Core.Models.Identifiers;

@inject HttpClient Http
@inject NavigationManager navManager

@attribute [Authorize]

<Loader IsLoading="ShowLoader">
    <div class="d-grid gap-2 d-block d-sm-block d-md-block d-lg-none d-xl-none d-xxl-none mb-1">
        <a href="attendance/absences" class="btn btn-primary"><i class="fas fa-long-arrow-left" /> Go Back</a>
    </div>

    <div class="d-none d-lg-block d-xl-block d-xxl-block mb-1">
        <a href="attendance/absences" class="btn btn-primary"><i class="fas fa-long-arrow-left" /> Go Back</a>
    </div>

    <h2>@Absence.Type absence for @Absence.Student.DisplayName</h2>

    <EditForm Model="Comment" OnValidSubmit="SubmitResponse">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-3">
            <div class="mb-2 col-md-2">
                <strong>Status</strong>
            </div>
            <div class="mb-2 col-md-10">
                @if (Absence.Type == AbsenceType.Whole)
                {
                    @if (Absence.Explained)
                    {
                        <span><i class="fas fa-check" /> Explained Whole Absence</span>
                    } else
                    {
                        <span><i class="fas fa-exclamation" /> Unexplained Whole Absence</span>
                    }
                }

                @if (Absence.Type == AbsenceType.Partial)
                {
                    @if (Absence.Explained && Absence.AbsenceReason != "Absent")
                    {
                        <span><i class="fas fa-check" /> Explained Partial Absence via @Absence.AbsenceReason</span>
                    } else if (Absence.VerificationStatus == ResponseVerificationStatus.Verified)
                    {
                        <span><i class="fas fa-check" /> @Absence.VerificationStatus.Name Partial Absence</span>
                    }
                    else if (Absence.VerificationStatus == ResponseVerificationStatus.Rejected)
                    {
                        <span><i class="fas fa-exclamation" /> @Absence.VerificationStatus.Name Partial Absence</span>
                    }
                    else if (Absence.VerificationStatus == ResponseVerificationStatus.Pending)
                    {
                        <span><i class="fas fa-question" /> @Absence.VerificationStatus.Name Partial Absence</span>
                    } else
                    {
                        <span><i class="fas fa-exclamation" /> Unexplained Partial Absence</span>
                    }
                }
            </div>
        </div>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-1">
            <div class="mb-2 col-md-2">
                <strong>Date</strong>
            </div>
            <div class="mb-2 col-md-10">
                <span>@Absence.Date.ToShortDateString()</span>
            </div>
        </div>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-1">
            <div class="mb-2 col-md-2">
                <strong>Class</strong>
            </div>
            <div class="mb-2 col-md-10">
                <span>@Absence.OfferingName</span>
            </div>
        </div>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-1">
            <div class="mb-2 col-md-2">
                <strong>Absence</strong>
            </div>
            <div class="mb-2 col-md-10">
                <span>@Absence.AbsenceTimeframe</span>
            </div>
        </div>

        <div class="d-sm-flex flex-column flex-lg-row border-bottom mt-1">
            <div class="mb-2 col-md-2">
                <strong>Explanation</strong>
            </div>
            <div class="mb-2 col-md-10">
                @if (Absence.Type == AbsenceType.Whole)
                {
                    @if (Absence.Explained || !Absence.CanBeExplainedByParent)
                    {
                        <span>"@Absence.Reason"</span>
                    } else
                    {
                        <InputTextArea @bind-Value="Comment" rows="5" cols="100" class="form-control" />
                    }
                }

                @if (Absence.Type == AbsenceType.Partial)
                {
                    @if (Absence.Explained && Absence.AbsenceReason != "Absent")
                    {
                        <span>
                            @Absence.AbsenceReason
                        </span>                    
                    } else if (Absence.Explained)
                    {
                        <span>
                            "@Absence.Reason"<br />
                            @Absence.VerificationStatus.Name by @Absence.ValidatedBy
                        </span>
                    } else if (Absence.VerificationStatus == ResponseVerificationStatus.Pending)
                    {
                        <span>
                            "@Absence.Reason"<br />
                            Pending verification by Aurora College Coordinator
                        </span>
                    } else
                    {
                        <span>Pending explanation by @Absence.Student.DisplayName</span>
                    }
                }
            </div>
        </div>

        @if (Absence.Type == AbsenceType.Whole && !Absence.Explained && Absence.CanBeExplainedByParent)
        {
            <div class="d-grid gap-2 d-block d-sm-block d-md-block d-lg-none d-xl-none d-xxl-none mt-1">
                <button class="btn btn-success btn-lg" type="submit">Submit</button>
            </div>

            <div class="d-none d-lg-block d-xl-block d-xxl-block mt-1">
                <button class="btn btn-success btn-lg" type="submit">Submit</button>
            </div>
        }
    </EditForm>
</Loader>
@code {
    [Parameter] public Guid Id { get; set; }

    public bool ShowLoader { get; set; } = false;

    ParentAbsenceDetailsResponse Absence { get; set; }
    public string Comment { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        ShowLoader = true;

        try
        {
            Absence = await Http.GetFromJsonAsync<ParentAbsenceDetailsResponse>($"Attendance/Details/{Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        ShowLoader = false;
    }

    async Task SubmitResponse()
    {
        if (Absence.CanBeExplainedByParent)
        {
            AbsenceId absenceId = AbsenceId.FromValue(Id);

            ProvideParentWholeAbsenceExplanationCommand Command = new(
                absenceId,
                Comment);

            await Http.PostAsJsonAsync<ProvideParentWholeAbsenceExplanationCommand>($"Attendance/ParentExplanation", Command);
        }

        navManager.NavigateTo("Attendance/Absences");
    }
}
