@page "/Attendance/Absences/"

@using Constellation.Application.Features.Attendance.Queries

@inject HttpClient Http
@inject IJSRuntime JS

@attribute [Authorize]

<Loader IsLoading="ShowLoader">
    <h2>Absences</h2>

    <div class="d-flex flex-column flex-lg-row justify-content-around mt-3">
        <div class="cursor-pointer border border-secondary rounded p-3 mb-3 h-100 text-center @(AbsencesType == AbsenceCategory.VerifiedPartials ? "selected" : "unselected")" @onclick="() => ChangeAbsenceType(AbsenceCategory.VerifiedPartials)">
            <div>Verified Partial Absences</div>
            <div>@VerifiedPartialsCount</div>
        </div>

        <div class="cursor-pointer border border-secondary rounded p-3 mb-3 h-100 text-center @(AbsencesType == AbsenceCategory.ExplainedWholes ? "selected" : "unselected")" @onclick="() => ChangeAbsenceType(AbsenceCategory.ExplainedWholes)">
            <div>Explained Whole Absences</div>
            <div>@ExplainedWholesCount</div>
        </div>
    </div>

    <div class="d-flex flex-column flex-lg-row justify-content-around mb-3">
        <div class="cursor-pointer border border-secondary rounded p-3 mb-3 h-100 text-center @(AbsencesType == AbsenceCategory.UnexplainedPartials ? "selected" : "unselected")" @onclick="() => ChangeAbsenceType(AbsenceCategory.UnexplainedPartials)">
            <div>Unexplained Partial Absences</div>
            <div>@UnexplainedPartialsCount</div>
        </div>

        <div class="cursor-pointer border border-secondary rounded p-3 mb-3 h-100 text-center @(AbsencesType == AbsenceCategory.UnverifiedPartials ? "selected" : "unselected")" @onclick="() => ChangeAbsenceType(AbsenceCategory.UnverifiedPartials)">
            <div>Unverified Partial Absences</div>
            <div>@UnverifiedPartialsCount</div>
        </div>

        <div class="cursor-pointer border border-secondary rounded p-3 mb-3 h-100 text-center @(AbsencesType == AbsenceCategory.UnexplainedWholes ? "selected" : "unselected")" @onclick="() => ChangeAbsenceType(AbsenceCategory.UnexplainedWholes)">
            <div>Unexplained Whole Absences</div>
            <div>@UnexplainedWholesCount</div>
        </div>
    </div>

    <div class="m-3">
        @if (AbsencesType == AbsenceCategory.VerifiedPartials)
        {
            <h3>Verified Partial Absences</h3>
            <span>
                These absences are where a student was not present for a portion of a lesson. Students have provided an reason for their absence, and the Aurora College Coordinator at their school has verified the reason.
            </span>
        }

        @if (AbsencesType == AbsenceCategory.ExplainedWholes)
        {
            <h3>Explained Whole Absences</h3>
            <span>
                These absences are where a student was not present for an entire lesson. An explanation for the absence has been provided either by a parent, or by the Aurora College Coordinator at the school.
            </span>
        }

        @if (AbsencesType == AbsenceCategory.UnexplainedPartials)
        {
            <h3>Unexplained Partial Absences</h3>
            <span>
                These absences are where a student was not present for a portion of a lesson. Students are sent an email requesting a reason for their absence, which is then forwarded to the Aurora College Coordinator at their school for verification.
            </span>
        }

        @if (AbsencesType == AbsenceCategory.UnverifiedPartials)
        {
            <h3>Unverified Partial Absences</h3>
            <span>
                These absences are where a student was not present for a portion of a lesson. Students have provided an reason for their absence, which is then forwarded to the Aurora College Coordinator at their school for verification. The Aurora College Coordinator has not yet verified the explanation.
            </span>
        }

        @if (AbsencesType == AbsenceCategory.UnexplainedWholes)
        {
            <h3>Unexplained Whole Absences</h3>
            <span>
                These absences are where a student was not present for an entire lesson. Parents are requested to provide an explanation for the absence. Please provide one here.
            </span>
        }
    </div>

    <div class="d-flex flex-column justify-content-around">
        <div class="accordion accordion-flush" id="accordion">
            @foreach (var month in FilteredAbsences.GroupBy(absence => absence.Date.Month))
            {
                <div class="accordion-item">
                    <h2 class="accordion-header" id="accordion-header-@month.Key">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#accordion-item-@month.Key" aria-expanded="false" aria-controls="accordion-item-@month.Key">
                            @month.First().Date.ToString("MMMM")
                        </button>
                    </h2>
                    <div id="accordion-item-@month.Key" class="accordion-collapse collapse" aria-labelledby="accordion-header-@month.Key" data-bs-parent="#accordion">
                        <div class="accordion-body">
                            @foreach (var entry in month)
                            {
                                <div class="w-auto p-3 mb-2 shadow position-relative">
                                    <div class="row d-flex align-items-center"> @*Display as flex to enable vertical centering of the button in the second div*@
                                        <div class="col-lg-8">
                                            <div class="h5">@entry.StudentName (@entry.StudentCurrentGrade) - @entry.AbsenceReason</div>
                                            @*<div><span class="me-2">@entry.Status.ToString()</span> <span class="me-2">@entry.Id</span></div>*@
                                            <div><span class="me-2">@entry.Date.ToString("dd/MM")</span> <span class="me-2">@entry.OfferingName</span> @entry.AbsenceLength min (@entry.AbsenceTimeframe)</div>
                    
                                            @*If this is a unverified partial absence, include the student explanation in the view*@
                                            @if (!string.IsNullOrWhiteSpace(entry.Explanation))
                                            {
                                                <div class="mt-2">"@entry.Explanation"</div>
                                            }
                    
                                            @*Turn the entire entry into a clickable element*@
                                            <span class="fst-italic">Click or tap to change</span>

                                            <div class="d-block">
                                                <a href="attendance/absences/details/@entry.Id" class="stretched-link"></a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</Loader>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool ShowLoader { get; set; } = false;

    private List<AbsenceDto> AbsencesList = new();
    private List<AbsenceDto> FilteredAbsences { get; set; } = new();
    private AbsenceCategory AbsencesType { get; set; } = AbsenceCategory.UnexplainedWholes;

    private int ExplainedWholesCount = 0;
    private int VerifiedPartialsCount = 0;
    private int UnexplainedPartialsCount = 0;
    private int UnverifiedPartialsCount = 0;
    private int UnexplainedWholesCount = 0;

    protected override async Task OnParametersSetAsync()
    {
        ShowLoader = true;

        try
        {
            AbsencesList = await Http.GetFromJsonAsync<List<AbsenceDto>>($"Attendance");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        VerifiedPartialsCount = AbsencesList.Count(absence => absence.Status == AbsenceDto.AbsenceStatus.VerifiedPartial);
        ExplainedWholesCount = AbsencesList.Count(absence => absence.Status == AbsenceDto.AbsenceStatus.ExplainedWhole);
        UnexplainedPartialsCount = AbsencesList.Count(absence => absence.Status == AbsenceDto.AbsenceStatus.UnexplainedPartial);
        UnverifiedPartialsCount = AbsencesList.Count(absence =>  absence.Status == AbsenceDto.AbsenceStatus.UnverifiedPartial);
        UnexplainedWholesCount = AbsencesList.Count(absence => absence.Status == AbsenceDto.AbsenceStatus.UnexplainedWhole);

        await FilterAbsences();

        ShowLoader = false;
    }

    public enum AbsenceCategory
    {
        UnexplainedPartials,
        UnverifiedPartials,
        UnexplainedWholes,
        ExplainedWholes,
        VerifiedPartials
    }

    private async Task FilterAbsences()
    {
        switch (AbsencesType)
        {
            case AbsenceCategory.UnexplainedPartials:
                FilteredAbsences = AbsencesList
                    .Where(absence => absence.Status == AbsenceDto.AbsenceStatus.UnexplainedPartial)
                    .OrderBy(absence => absence.Date)
                    .ThenBy(absence => absence.StudentCurrentGrade)
                    .ThenBy(absence => absence.StudentLastName)
                    .ThenBy(absence => absence.StudentFirstName)
                    .ToList();
                break;
            case AbsenceCategory.UnexplainedWholes:
                FilteredAbsences = AbsencesList
                    .Where(absence => absence.Status == AbsenceDto.AbsenceStatus.UnexplainedWhole)
                    .OrderBy(absence => absence.Date)
                    .ThenBy(absence => absence.StudentCurrentGrade)
                    .ThenBy(absence => absence.StudentLastName)
                    .ThenBy(absence => absence.StudentFirstName)
                    .ToList();
                break;
            case AbsenceCategory.UnverifiedPartials:
                FilteredAbsences = AbsencesList
                    .Where(absence => absence.Status == AbsenceDto.AbsenceStatus.UnverifiedPartial)
                    .OrderBy(absence => absence.Date)
                    .ThenBy(absence => absence.StudentCurrentGrade)
                    .ThenBy(absence => absence.StudentLastName)
                    .ThenBy(absence => absence.StudentFirstName)
                    .ToList();
                break;
            case AbsenceCategory.ExplainedWholes:
                FilteredAbsences = AbsencesList
                    .Where(absence => absence.Status == AbsenceDto.AbsenceStatus.ExplainedWhole)
                    .OrderBy(absence => absence.Date)
                    .ThenBy(absence => absence.StudentCurrentGrade)
                    .ThenBy(absence => absence.StudentLastName)
                    .ThenBy(absence => absence.StudentFirstName)
                    .ToList();
                break;
            case AbsenceCategory.VerifiedPartials:
                FilteredAbsences = AbsencesList
                    .Where(absence => absence.Status == AbsenceDto.AbsenceStatus.VerifiedPartial)
                    .OrderBy(absence => absence.Date)
                    .ThenBy(absence => absence.StudentCurrentGrade)
                    .ThenBy(absence => absence.StudentLastName)
                    .ThenBy(absence => absence.StudentFirstName)
                    .ToList();
                break;
        }

        await JS.InvokeVoidAsync("collapseAccordion");
    }

    async Task ChangeAbsenceType(AbsenceCategory type)
    {
        AbsencesType = type;

        await FilterAbsences();
    }
}
