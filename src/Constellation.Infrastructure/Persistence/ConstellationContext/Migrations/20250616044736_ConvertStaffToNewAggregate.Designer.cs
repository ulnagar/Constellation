// <auto-generated />
using System;
using System.Collections.Generic;
using Constellation.Infrastructure.Persistence.ConstellationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Constellation.Infrastructure.Persistence.ConstellationContext.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250616044736_ConvertStaffToNewAggregate")]
    partial class ConvertStaffToNewAggregate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Constellation.Application.Domains.ScheduledReports.Models.ScheduledReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRan")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportDefinition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("ForwardTo", "Constellation.Application.Domains.ScheduledReports.Models.ScheduledReport.ForwardTo#EmailRecipient", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");
                        });

                    b.HasKey("Id");

                    b.ToTable("ScheduledReports", "Automation");
                });

            modelBuilder.Entity("Constellation.Application.Models.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audit", (string)null);
                });

            modelBuilder.Entity("Constellation.Application.Models.Identity.AppAccessToken", b =>
                {
                    b.Property<Guid>("AccessToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("MapToUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessToken");

                    b.ToTable("AspNetAccessTokens");
                });

            modelBuilder.Entity("Constellation.Application.Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Constellation.Application.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSchoolContact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStaffMember")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SchoolContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Constellation.Application.Models.JobActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InactiveUntil")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobName")
                        .IsUnique()
                        .HasFilter("[JobName] IS NOT NULL");

                    b.ToTable("JobActivations");
                });

            modelBuilder.Entity("Constellation.Core.Models.Absences.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AbsenceLength")
                        .HasColumnType("int");

                    b.Property<string>("AbsenceReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbsenceTimeframe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("Explained")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PeriodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTimeframe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences_Absences", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Absences.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ConfirmedDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveredMessageIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.ToTable("Absences_Notifications", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Absences.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Forwarded")
                        .HasColumnType("bit");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Verifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.ToTable("Absences_Responses", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Allocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AllocationDate")
                        .HasColumnType("date");

                    b.Property<string>("AllocationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleOfficer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Allocations", "Assets");
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchaseCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("PurchaseDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SapEquipmentNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("WarrantyEndDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AssetNumber")
                        .IsUnique();

                    b.HasIndex("SapEquipmentNumber")
                        .IsUnique()
                        .HasFilter("[SapEquipmentNumber] IS NOT NULL");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Assets", "Assets");
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ArrivalDate")
                        .HasColumnType("date");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CurrentLocation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("SchoolCode");

                    b.ToTable("Locations", "Assets");
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Notes", "Assets");
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Sighting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SightedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SightedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Sightings", "Assets");
                });

            modelBuilder.Entity("Constellation.Core.Models.Assignments.CanvasAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowedAttempts")
                        .HasColumnType("int");

                    b.Property<int>("CanvasId")
                        .HasColumnType("int");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DelayForwarding")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("ForwardingDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LockDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UnlockDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments_Assignments", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Assignments.CanvasAssignmentSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Uploaded")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Assignments_Submissions", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Checksum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attachments_Attachments", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendancePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("SciencePracLesson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Student", "Constellation.Core.Models.Attendance.AttendancePlan.Student#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PreferredName")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Plans", "Attendance");
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendancePlanNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttendancePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendancePlanId");

                    b.HasIndex("PlanId");

                    b.ToTable("Notes", "Attendance");
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendancePlanPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("EntryTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ExitTime")
                        .HasColumnType("time");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfferingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<double>("TargetMinutesPerCycle")
                        .HasPrecision(2)
                        .HasColumnType("float(2)");

                    b.Property<string>("Timetable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Week")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("OfferingId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanPeriods", "Attendance");
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendanceValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<decimal>("PerDayWeekPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PerDayYearToDatePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PerMinuteWeekPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PerMinuteYearToDatePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("PeriodLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance_Values", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.Nomination", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AwardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex("StudentId");

                    b.ToTable("Awards_Nominations", (string)null);

                    b.HasDiscriminator<string>("AwardType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.NominationPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("LockoutDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Awards_NominationPeriods", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.NominationPeriodGrade", b =>
                {
                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("PeriodId", "Grade");

                    b.ToTable("Awards_NominationPeriods_Grades", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.StudentAward", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AwardedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Awards_StudentAwards", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Casuals.Casual", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdobeConnectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasFilter("[EmailAddress] IS NOT NULL");

                    b.HasIndex("SchoolCode");

                    b.ToTable("Casuals_Casuals", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Covers.ClassCover", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.ToTable("Covers_ClassCovers", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Device", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateDisposed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateWarrantyExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.DeviceAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAllocated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber");

                    b.HasIndex("StudentId");

                    b.ToTable("DeviceAllocations", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.DeviceNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber");

                    b.ToTable("DeviceNotes");
                });

            modelBuilder.Entity("Constellation.Core.Models.Edval.Difference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ignored")
                        .HasColumnType("bit");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Differences", "Edval");
                });

            modelBuilder.Entity("Constellation.Core.Models.Edval.EdvalClass", b =>
                {
                    b.Property<string>("EdvalClassCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Form")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EdvalClassCode");

                    b.ToTable("Class", "Edval");
                });

            modelBuilder.Entity("Constellation.Core.Models.Edval.EdvalClassMembership", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EdvalClassCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "EdvalClassCode");

                    b.ToTable("ClassMembership", "Edval");
                });

            modelBuilder.Entity("Constellation.Core.Models.Edval.EdvalIgnore", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Type", "System", "Identifier");

                    b.ToTable("Ignore", "Edval");
                });

            modelBuilder.Entity("Constellation.Core.Models.Edval.EdvalStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "StudentId");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Email");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "EndDate");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "FirstName");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Gender");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Form");

                    b.Property<string>("House")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "House");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Surname");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Phone");

                    b.Property<string>("PreferredName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "PreferredName");

                    b.Property<string>("RollGroup")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "RollGroup");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "StartDate");

                    b.Property<string>("StudentReference")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "StatewideId");

                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Guid");

                    b.HasKey("StudentId");

                    b.ToTable("Student", "Edval");
                });

            modelBuilder.Entity("Constellation.Core.Models.Edval.EdvalTeacher", b =>
                {
                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "Guid");

                    b.Property<string>("DaysAvailable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Email");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Surname");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Phone");

                    b.Property<string>("PreferredName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniqueId");

                    b.ToTable("Teacher", "Edval");
                });

            modelBuilder.Entity("Constellation.Core.Models.Edval.EdvalTimetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Key", 0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timetable")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "TtStructure");

                    b.HasKey("Id");

                    b.ToTable("Timetable", "Edval");
                });

            modelBuilder.Entity("Constellation.Core.Models.Enrolments.Enrolment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrolments", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Faculties.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faculties_Faculty", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Faculties.FacultyMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("Faculties_Memberships", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Families.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SentralId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Families_Family", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Families.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SentralId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SentralLink")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Families_Parents", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Families.StudentFamilyMembership", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsResidentialFamily")
                        .HasColumnType("bit");

                    b.HasKey("FamilyId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Families_StudentMemberships", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.GroupTutorial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("GroupTutorials_Tutorial", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialEnrolment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EffectiveTo")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TutorialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorialId");

                    b.ToTable("GroupTutorials_Enrolment", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialRoll", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("SessionDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TutorialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("TutorialId");

                    b.ToTable("GroupTutorials_Roll", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialRollStudent", b =>
                {
                    b.Property<Guid>("TutorialRollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enrolled")
                        .HasColumnType("bit");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.HasKey("TutorialRollId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupTutorials_RollStudent", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EffectiveTo")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TutorialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("TutorialId");

                    b.ToTable("GroupTutorials_Teachers", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.MSTeamOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<Guid>("CoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateScheduled")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.HasKey("Id");

                    b.ToTable("MSTeamOperations");

                    b.HasDiscriminator<string>("UserType").HasValue("MSTeamOperation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.Offering", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Offerings_Offerings", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.ToTable("Offerings_Resources", (string)null);

                    b.HasDiscriminator<string>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("PeriodId");

                    b.ToTable("Offerings_Sessions", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.TeacherAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StaffId");

                    b.ToTable("Offerings_Teachers", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Operations.CanvasOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CanvasOperations", (string)null);

                    b.HasDiscriminator<string>("OperationType").HasValue("CanvasOperation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Constellation.Core.Models.Reports.AcademicReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublishId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("AcademicReports", "Reports");
                });

            modelBuilder.Entity("Constellation.Core.Models.Reports.ExternalReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("IssuedDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("ExternalReports", "Reports");
                });

            modelBuilder.Entity("Constellation.Core.Models.Reports.TempExternalReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("IssuedDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TempReports", "Reports");
                });

            modelBuilder.Entity("Constellation.Core.Models.School", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationalServicesTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("HeatSchool")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipalNetwork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollCallGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimetableApplication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Schools", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.SchoolContacts.SchoolContact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("SelfRegistered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SchoolContacts_Contacts", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.SchoolContacts.SchoolContactRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("SchoolContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolCode");

                    b.HasIndex("SchoolContactId");

                    b.ToTable("SchoolContacts_Roles", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.Property<Guid>("SciencePracRollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SciencePracRollId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance", "SciencePracs");
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DoNotGenerateRolls")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("Grade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(13);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lessons", "SciencePracs");
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracLessonOffering", b =>
                {
                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LessonId", "OfferingId");

                    b.HasIndex("OfferingId");

                    b.ToTable("LessonOfferings", "SciencePracs");
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracRoll", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("LessonDate")
                        .HasColumnType("date");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationCount")
                        .HasColumnType("int");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("SchoolCode");

                    b.ToTable("Rolls", "SciencePracs");
                });

            modelBuilder.Entity("Constellation.Core.Models.StaffMembers.SchoolAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SchoolCode");

                    b.HasIndex("StaffId");

                    b.ToTable("SchoolAssignments", "Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.StaffMembers.StaffMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Constellation.Core.Models.StaffMembers.StaffMember.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("PreferredName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PreferredName");
                        });

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Members", "Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.StaffMembers.StaffMemberSystemLink", b =>
                {
                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId", "System");

                    b.ToTable("SystemLinks", "Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.Stocktake.StocktakeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptLateResponses")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StocktakeEvents", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Stocktake.StocktakeSighting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("LocationCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SightedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SightedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StocktakeEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StocktakeEventId");

                    b.ToTable("StocktakeSightings", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.AbsenceConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbsenceType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ScanEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ScanStartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId", "AbsenceType", "CalendarYear");

                    b.ToTable("AbsenceConfigurations", "Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.AwardTally", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Astras")
                        .HasColumnType("int");

                    b.Property<int>("GalaxyMedals")
                        .HasColumnType("int");

                    b.Property<int>("Stellars")
                        .HasColumnType("int");

                    b.Property<int>("UniversalAchievers")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.ToTable("AwardTallies", "Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.SchoolEnrolment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolCode");

                    b.HasIndex("StudentId");

                    b.ToTable("SchoolEnrolments", "Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndigenousStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentReferenceNumber")
                        .HasColumnType("nvarchar(450)");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Constellation.Core.Models.Students.Student.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PreferredName")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("StudentReferenceNumber")
                        .IsUnique()
                        .HasFilter("[StudentReferenceNumber] IS NOT NULL");

                    b.ToTable("Students", "Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.StudentSystemLink", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "System");

                    b.ToTable("SystemLinks", "Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.Subjects.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FullTimeEquivalentValue")
                        .HasPrecision(4, 3)
                        .HasColumnType("decimal(4,3)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TargetMinutesPerCycle")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("FacultyId");

                    b.ToTable("Subjects_Courses", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LinkedSystems_Teams", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConsentRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformationCollected")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharedWith")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoredCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Applications", "ThirdParty");
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ConsentProvided")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProvidedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProvidedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("StudentId");

                    b.ToTable("Consents", "ThirdParty");
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.ConsentRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ConsentRequirements", "ThirdParty");

                    b.HasDiscriminator<string>("Type").HasValue("ConsentRequirement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProvidedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProvidedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvidedByEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Student", "Constellation.Core.Models.ThirdPartyConsent.Transaction.Student#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("PreferredName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PreferredName");
                        });

                    b.HasKey("Id");

                    b.ToTable("Transactions", "ThirdParty");
                });

            modelBuilder.Entity("Constellation.Core.Models.Timetables.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Timetable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Periods", "Timetables");
                });

            modelBuilder.Entity("Constellation.Core.Models.Training.TrainingCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CompletedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("TrainingModuleId");

                    b.ToTable("Completions", "Training");
                });

            modelBuilder.Entity("Constellation.Core.Models.Training.TrainingModule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Expiry")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules", "Training");
                });

            modelBuilder.Entity("Constellation.Core.Models.Training.TrainingModuleAssignee", b =>
                {
                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ModuleId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("Assignees", "Training");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CaseId");

                    b.ToTable("WorkFlows_Actions", (string)null);

                    b.HasDiscriminator<string>("ActionType").HasValue("Action");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.ActionNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("WorkFlows_ActionNotes", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkFlows_Cases", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.CaseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaseDetailType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("WorkFlows_CaseDetails", (string)null);

                    b.HasDiscriminator<string>("CaseDetailType").HasValue("CaseDetail");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.InterviewAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("WorkFlows_Actions_InterviewAttendees", (string)null);
                });

            modelBuilder.Entity("Constellation.Infrastructure.Persistence.ConstellationContext.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("Constellation.Infrastructure.Persistence.ConstellationContext.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id", "Name");

                    b.ToTable("OutboxMessageConsumer", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.AcademicAchievementMathematicsNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<string>("ClassName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClassName");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<Guid>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfferingId");

                    b.HasDiscriminator().HasValue("Academic Achievement - Mathematics");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.AcademicAchievementNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<string>("ClassName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClassName");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<Guid>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfferingId");

                    b.HasDiscriminator().HasValue("Academic Achievement");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.AcademicAchievementScienceTechnologyNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<string>("ClassName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClassName");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<Guid>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfferingId");

                    b.HasDiscriminator().HasValue("Academic Achievement - Science & Technology");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.AcademicExcellenceMathematicsNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<string>("ClassName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClassName");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<Guid>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfferingId");

                    b.HasDiscriminator().HasValue("Academic Excellence - Mathematics");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.AcademicExcellenceNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<string>("ClassName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClassName");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<Guid>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfferingId");

                    b.HasDiscriminator().HasValue("Academic Excellence");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.AcademicExcellenceScienceTechnologyNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<string>("ClassName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClassName");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<Guid>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfferingId");

                    b.HasDiscriminator().HasValue("Academic Excellence - Science & Technology");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.FirstInSubjectMathematicsNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<int>("Grade")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Grade");

                    b.HasDiscriminator().HasValue("First in Course - Mathematics");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.FirstInSubjectNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<int>("Grade")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Grade");

                    b.HasDiscriminator().HasValue("First in Course");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.FirstInSubjectScienceTechnologyNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("CourseName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CourseName");

                    b.Property<int>("Grade")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Grade");

                    b.HasDiscriminator().HasValue("First in Course - Science & Technology");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.GalaxyMedalNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.HasDiscriminator().HasValue("Galaxy Medal");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.PrincipalsAwardNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.HasDiscriminator().HasValue("Principals Award");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.UniversalAchieverNomination", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Awards.Nomination");

                    b.HasDiscriminator().HasValue("Universal Achiever");
                });

            modelBuilder.Entity("Constellation.Core.Models.ContactAddedMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ContactId");

                    b.HasDiscriminator().HasValue("ContactAdded");
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorialCreatedMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TutorialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TutorialId");

                    b.HasDiscriminator().HasValue("GroupTutorialCreatedMSTeamOperation");
                });

            modelBuilder.Entity("Constellation.Core.Models.OfferingMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<Guid>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OfferingId");

                    b.HasDiscriminator().HasValue("OfferingMSTeamOperation");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentEnrolledMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StudentId");

                    b.ToTable("MSTeamOperations", t =>
                        {
                            t.Property("StudentId")
                                .HasColumnName("StudentEnrolledMSTeamOperation_StudentId");
                        });

                    b.HasDiscriminator().HasValue("StudentEnrolled");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentOfferingMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentId");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("IX_MSTeamOperations_StudentId1");

                    b.HasDiscriminator().HasValue("StudentOffering");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherAssignmentMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StaffId");

                    b.HasDiscriminator().HasValue("TeacherAssigned");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherEmployedMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<Guid?>("StaffId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StaffId");

                    b.HasIndex("StaffId1");

                    b.HasDiscriminator().HasValue("TeacherEmployed");
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.CanvasCourseResource", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Offerings.Resource");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Canvas Course");
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.MicrosoftTeamResource", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Offerings.Resource");

                    b.HasDiscriminator().HasValue("Microsoft Team");
                });

            modelBuilder.Entity("Constellation.Core.Models.Operations.CreateUserCanvasOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Operations.CanvasOperation");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortalUsername")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PortalUsername");

                    b.HasDiscriminator().HasValue("CreateUser");
                });

            modelBuilder.Entity("Constellation.Core.Models.Operations.DeleteUserCanvasOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Operations.CanvasOperation");

                    b.HasDiscriminator().HasValue("DeleteUser");
                });

            modelBuilder.Entity("Constellation.Core.Models.Operations.ModifyEnrolmentCanvasOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Operations.CanvasOperation");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ModifyEnrolment");
                });

            modelBuilder.Entity("Constellation.Core.Models.Operations.UpdateUserEmailCanvasOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.Operations.CanvasOperation");

                    b.Property<string>("PortalUsername")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PortalUsername");

                    b.HasDiscriminator().HasValue("UpdateEmail");
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.CourseConsentRequirement", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.ThirdPartyConsent.ConsentRequirement");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("Course");
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.GradeConsentRequirement", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.ThirdPartyConsent.ConsentRequirement");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Grade");
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.StudentConsentRequirement", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.ThirdPartyConsent.ConsentRequirement");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.CaseDetailUpdateAction", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.Action");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CaseDetailUpdateAction");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.ConfirmSentralEntryAction", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.Action");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ConfirmSentralEntryAction");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.CreateSentralEntryAction", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.Action");

                    b.Property<int>("IncidentNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("IncidentNumber");

                    b.Property<bool>("NotRequired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfferingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("OfferingId");

                    b.HasDiscriminator().HasValue("CreateSentralEntryAction");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.ParentInterviewAction", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.Action");

                    b.Property<DateTime>("DateOccurred")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOccurred");

                    b.Property<int>("IncidentNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("IncidentNumber");

                    b.HasDiscriminator().HasValue("ParentInterviewAction");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.PhoneParentAction", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.Action");

                    b.Property<DateTime>("DateOccurred")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOccurred");

                    b.Property<int>("IncidentNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("IncidentNumber");

                    b.Property<string>("ParentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ParentName");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PhoneParentAction");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.SendEmailAction", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.Action");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SendEmailAction");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.SentralIncidentStatusAction", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.Action");

                    b.Property<int>("IncidentNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("IncidentNumber");

                    b.Property<bool>("MarkedNotCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("MarkedResolved")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("SentralIncidentStatusAction");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.UploadTrainingCertificateAction", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.Action");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ModuleName");

                    b.HasDiscriminator().HasValue("UploadTrainingCertificateAction");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.AttendanceCaseDetail", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.CaseDetail");

                    b.Property<Guid>("AttendanceValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Grade")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Grade");

                    b.Property<string>("Name")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<decimal>("PerDayWeekPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerDayYearToDatePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerMinuteWeekPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerMinuteYearToDatePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PeriodLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SchoolCode");

                    b.Property<string>("SchoolName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SchoolName");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentId");

                    b.HasDiscriminator().HasValue("AttendanceCaseDetail");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.ComplianceCaseDetail", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.CaseDetail");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int>("Grade")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Grade");

                    b.Property<string>("IncidentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("SchoolCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SchoolCode");

                    b.Property<string>("SchoolName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SchoolName");

                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentId");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ComplianceCaseDetail");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.TrainingCaseDetail", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.WorkFlow.CaseDetail");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("DueDate");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ModuleName");

                    b.Property<string>("Name")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<Guid>("TrainingModuleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrainingModuleId");

                    b.HasDiscriminator().HasValue("TrainingCaseDetail");
                });

            modelBuilder.Entity("Constellation.Core.Models.CasualMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.OfferingMSTeamOperation");

                    b.Property<Guid>("CasualId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Casual");
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.OfferingMSTeamOperation");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FacultyId");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.OfferingMSTeamOperation");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("StudentId");

                    b.ToTable("MSTeamOperations", t =>
                        {
                            t.Property("StudentId")
                                .HasColumnName("StudentMSTeamOperation_StudentId");
                        });

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.OfferingMSTeamOperation");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("StaffId");

                    b.ToTable("MSTeamOperations", t =>
                        {
                            t.Property("StaffId")
                                .HasColumnName("TeacherMSTeamOperation_StaffId");
                        });

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Constellation.Core.Models.Absences.Absence", b =>
                {
                    b.HasOne("Constellation.Core.Models.Offerings.Offering", null)
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Absences.Notification", b =>
                {
                    b.HasOne("Constellation.Core.Models.Absences.Absence", null)
                        .WithMany("Notifications")
                        .HasForeignKey("AbsenceId");
                });

            modelBuilder.Entity("Constellation.Core.Models.Absences.Response", b =>
                {
                    b.HasOne("Constellation.Core.Models.Absences.Absence", null)
                        .WithMany("Responses")
                        .HasForeignKey("AbsenceId");
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Allocation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Assets.Asset", null)
                        .WithMany("Allocations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Location", b =>
                {
                    b.HasOne("Constellation.Core.Models.Assets.Asset", null)
                        .WithMany("Locations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Note", b =>
                {
                    b.HasOne("Constellation.Core.Models.Assets.Asset", null)
                        .WithMany("Notes")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Sighting", b =>
                {
                    b.HasOne("Constellation.Core.Models.Assets.Asset", null)
                        .WithMany("Sightings")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Assignments.CanvasAssignment", b =>
                {
                    b.HasOne("Constellation.Core.Models.Subjects.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Assignments.CanvasAssignmentSubmission", b =>
                {
                    b.HasOne("Constellation.Core.Models.Assignments.CanvasAssignment", null)
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendancePlan", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Constellation.Core.Models.Attendance.AttendancePlanFreePeriod", "FreePeriods", b1 =>
                        {
                            b1.Property<Guid>("AttendancePlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Activity")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Day")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Minutes")
                                .HasColumnType("float");

                            b1.Property<string>("Period")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Week")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AttendancePlanId", "Id");

                            b1.ToTable("Plans", "Attendance");

                            b1.ToJson("FreePeriods");

                            b1.WithOwner()
                                .HasForeignKey("AttendancePlanId");
                        });

                    b.OwnsMany("Constellation.Core.Models.Attendance.AttendancePlanMissedLesson", "MissedLessons", b1 =>
                        {
                            b1.Property<Guid>("AttendancePlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<double>("MinutesMissedPerCycle")
                                .HasColumnType("float");

                            b1.Property<string>("Subject")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("TotalMinutesPerCycle")
                                .HasColumnType("float");

                            b1.HasKey("AttendancePlanId", "Id");

                            b1.ToTable("Plans", "Attendance");

                            b1.ToJson("MissedLessons");

                            b1.WithOwner()
                                .HasForeignKey("AttendancePlanId");
                        });

                    b.Navigation("FreePeriods");

                    b.Navigation("MissedLessons");
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendancePlanNote", b =>
                {
                    b.HasOne("Constellation.Core.Models.Attendance.AttendancePlan", null)
                        .WithMany("Notes")
                        .HasForeignKey("AttendancePlanId");

                    b.HasOne("Constellation.Core.Models.Attendance.AttendancePlan", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendancePlanPeriod", b =>
                {
                    b.HasOne("Constellation.Core.Models.Subjects.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Offerings.Offering", null)
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Timetables.Period", null)
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Attendance.AttendancePlan", null)
                        .WithMany("Periods")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendanceValue", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.Nomination", b =>
                {
                    b.HasOne("Constellation.Core.Models.Awards.NominationPeriod", null)
                        .WithMany("Nominations")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.NominationPeriodGrade", b =>
                {
                    b.HasOne("Constellation.Core.Models.Awards.NominationPeriod", null)
                        .WithMany("IncludedGrades")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.StudentAward", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Casuals.Casual", b =>
                {
                    b.HasOne("Constellation.Core.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Constellation.Core.Models.Covers.ClassCover", b =>
                {
                    b.HasOne("Constellation.Core.Models.Offerings.Offering", null)
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.DeviceAllocation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Device", "Device")
                        .WithMany("Allocations")
                        .HasForeignKey("SerialNumber");

                    b.HasOne("Constellation.Core.Models.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.DeviceNotes", b =>
                {
                    b.HasOne("Constellation.Core.Models.Device", "Device")
                        .WithMany("Notes")
                        .HasForeignKey("SerialNumber");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Constellation.Core.Models.Enrolments.Enrolment", b =>
                {
                    b.HasOne("Constellation.Core.Models.Offerings.Offering", null)
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Faculties.FacultyMembership", b =>
                {
                    b.HasOne("Constellation.Core.Models.Faculties.Faculty", null)
                        .WithMany("Members")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Constellation.Core.Models.Families.Parent", b =>
                {
                    b.HasOne("Constellation.Core.Models.Families.Family", null)
                        .WithMany("Parents")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Families.StudentFamilyMembership", b =>
                {
                    b.HasOne("Constellation.Core.Models.Families.Family", null)
                        .WithMany("Students")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialEnrolment", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.GroupTutorials.GroupTutorial", null)
                        .WithMany("Enrolments")
                        .HasForeignKey("TutorialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialRoll", b =>
                {
                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.GroupTutorials.GroupTutorial", null)
                        .WithMany("Rolls")
                        .HasForeignKey("TutorialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialRollStudent", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.GroupTutorials.TutorialRoll", null)
                        .WithMany("Students")
                        .HasForeignKey("TutorialRollId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialTeacher", b =>
                {
                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.GroupTutorials.GroupTutorial", null)
                        .WithMany("Teachers")
                        .HasForeignKey("TutorialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.Offering", b =>
                {
                    b.HasOne("Constellation.Core.Models.Subjects.Course", null)
                        .WithMany("Offerings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.Resource", b =>
                {
                    b.HasOne("Constellation.Core.Models.Offerings.Offering", "Offering")
                        .WithMany("Resources")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.Session", b =>
                {
                    b.HasOne("Constellation.Core.Models.Offerings.Offering", "Offering")
                        .WithMany("Sessions")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Timetables.Period", null)
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.TeacherAssignment", b =>
                {
                    b.HasOne("Constellation.Core.Models.Offerings.Offering", "Offering")
                        .WithMany("Teachers")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.Reports.AcademicReport", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Reports.ExternalReport", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.SchoolContacts.SchoolContactRole", b =>
                {
                    b.HasOne("Constellation.Core.Models.School", null)
                        .WithMany("StaffAssignments")
                        .HasForeignKey("SchoolCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Constellation.Core.Models.SchoolContacts.SchoolContact", null)
                        .WithMany("Assignments")
                        .HasForeignKey("SchoolContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracAttendance", b =>
                {
                    b.HasOne("Constellation.Core.Models.SciencePracs.SciencePracRoll", null)
                        .WithMany("Attendance")
                        .HasForeignKey("SciencePracRollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracLessonOffering", b =>
                {
                    b.HasOne("Constellation.Core.Models.SciencePracs.SciencePracLesson", null)
                        .WithMany("Offerings")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Offerings.Offering", null)
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracRoll", b =>
                {
                    b.HasOne("Constellation.Core.Models.SciencePracs.SciencePracLesson", null)
                        .WithMany("Rolls")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolCode");
                });

            modelBuilder.Entity("Constellation.Core.Models.StaffMembers.SchoolAssignment", b =>
                {
                    b.HasOne("Constellation.Core.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany("SchoolAssignments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.StaffMembers.StaffMemberSystemLink", b =>
                {
                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany("SystemLinks")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Stocktake.StocktakeSighting", b =>
                {
                    b.HasOne("Constellation.Core.Models.Stocktake.StocktakeEvent", "StocktakeEvent")
                        .WithMany("Sightings")
                        .HasForeignKey("StocktakeEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StocktakeEvent");
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.AbsenceConfiguration", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany("AbsenceConfigurations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.AwardTally", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithOne("AwardTally")
                        .HasForeignKey("Constellation.Core.Models.Students.AwardTally", "StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.SchoolEnrolment", b =>
                {
                    b.HasOne("Constellation.Core.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany("SchoolEnrolments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.StudentSystemLink", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany("SystemLinks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Subjects.Course", b =>
                {
                    b.HasOne("Constellation.Core.Models.Faculties.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.Consent", b =>
                {
                    b.HasOne("Constellation.Core.Models.ThirdPartyConsent.Application", null)
                        .WithMany("Consents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.ConsentRequirement", b =>
                {
                    b.HasOne("Constellation.Core.Models.ThirdPartyConsent.Application", null)
                        .WithMany("Requirements")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.Training.TrainingCompletion", b =>
                {
                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Training.TrainingModule", "Module")
                        .WithMany("Completions")
                        .HasForeignKey("TrainingModuleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Constellation.Core.Models.Training.TrainingModuleAssignee", b =>
                {
                    b.HasOne("Constellation.Core.Models.Training.TrainingModule", null)
                        .WithMany("Assignees")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.Action", b =>
                {
                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Constellation.Core.Models.WorkFlow.Case", null)
                        .WithMany("Actions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.ActionNote", b =>
                {
                    b.HasOne("Constellation.Core.Models.WorkFlow.Action", null)
                        .WithMany("Notes")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.CaseDetail", b =>
                {
                    b.HasOne("Constellation.Core.Models.WorkFlow.Case", null)
                        .WithOne("Detail")
                        .HasForeignKey("Constellation.Core.Models.WorkFlow.CaseDetail", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.InterviewAttendee", b =>
                {
                    b.HasOne("Constellation.Core.Models.WorkFlow.ParentInterviewAction", null)
                        .WithMany("Attendees")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Application.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.ContactAddedMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.SchoolContacts.SchoolContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorialCreatedMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.GroupTutorials.GroupTutorial", "GroupTutorial")
                        .WithMany()
                        .HasForeignKey("TutorialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupTutorial");
                });

            modelBuilder.Entity("Constellation.Core.Models.OfferingMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Offerings.Offering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentEnrolledMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentOfferingMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_MSTeamOperations_Students_StudentId1");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherAssignmentMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherEmployedMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId1");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.CourseConsentRequirement", b =>
                {
                    b.HasOne("Constellation.Core.Models.Subjects.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.StudentConsentRequirement", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.CreateSentralEntryAction", b =>
                {
                    b.HasOne("Constellation.Core.Models.Offerings.Offering", null)
                        .WithMany()
                        .HasForeignKey("OfferingId");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.SendEmailAction", b =>
                {
                    b.OwnsMany("Constellation.Core.ValueObjects.EmailRecipient", "Recipients", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("WorkFlows_Actions_Recipients", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Constellation.Core.ValueObjects.EmailRecipient", "Sender", b1 =>
                        {
                            b1.Property<Guid>("SendEmailActionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SenderEmail");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SenderName");

                            b1.HasKey("SendEmailActionId");

                            b1.ToTable("WorkFlows_Actions");

                            b1.WithOwner()
                                .HasForeignKey("SendEmailActionId");
                        });

                    b.Navigation("Recipients");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Faculties.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.StaffMembers.StaffMember", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.Absences.Absence", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Constellation.Core.Models.Assets.Asset", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Locations");

                    b.Navigation("Notes");

                    b.Navigation("Sightings");
                });

            modelBuilder.Entity("Constellation.Core.Models.Assignments.CanvasAssignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Constellation.Core.Models.Attendance.AttendancePlan", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Periods");
                });

            modelBuilder.Entity("Constellation.Core.Models.Awards.NominationPeriod", b =>
                {
                    b.Navigation("IncludedGrades");

                    b.Navigation("Nominations");
                });

            modelBuilder.Entity("Constellation.Core.Models.Device", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Constellation.Core.Models.Faculties.Faculty", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Constellation.Core.Models.Families.Family", b =>
                {
                    b.Navigation("Parents");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.GroupTutorial", b =>
                {
                    b.Navigation("Enrolments");

                    b.Navigation("Rolls");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupTutorials.TutorialRoll", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.Offerings.Offering", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("Sessions");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Constellation.Core.Models.School", b =>
                {
                    b.Navigation("StaffAssignments");
                });

            modelBuilder.Entity("Constellation.Core.Models.SchoolContacts.SchoolContact", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracLesson", b =>
                {
                    b.Navigation("Offerings");

                    b.Navigation("Rolls");
                });

            modelBuilder.Entity("Constellation.Core.Models.SciencePracs.SciencePracRoll", b =>
                {
                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("Constellation.Core.Models.StaffMembers.StaffMember", b =>
                {
                    b.Navigation("SchoolAssignments");

                    b.Navigation("SystemLinks");
                });

            modelBuilder.Entity("Constellation.Core.Models.Stocktake.StocktakeEvent", b =>
                {
                    b.Navigation("Sightings");
                });

            modelBuilder.Entity("Constellation.Core.Models.Students.Student", b =>
                {
                    b.Navigation("AbsenceConfigurations");

                    b.Navigation("AwardTally");

                    b.Navigation("SchoolEnrolments");

                    b.Navigation("SystemLinks");
                });

            modelBuilder.Entity("Constellation.Core.Models.Subjects.Course", b =>
                {
                    b.Navigation("Offerings");
                });

            modelBuilder.Entity("Constellation.Core.Models.ThirdPartyConsent.Application", b =>
                {
                    b.Navigation("Consents");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("Constellation.Core.Models.Training.TrainingModule", b =>
                {
                    b.Navigation("Assignees");

                    b.Navigation("Completions");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.Action", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.Case", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Constellation.Core.Models.WorkFlow.ParentInterviewAction", b =>
                {
                    b.Navigation("Attendees");
                });
#pragma warning restore 612, 618
        }
    }
}
