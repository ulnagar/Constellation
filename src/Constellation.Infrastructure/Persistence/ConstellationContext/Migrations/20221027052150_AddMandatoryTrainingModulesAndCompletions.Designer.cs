// <auto-generated />
using System;
using Constellation.Infrastructure.Persistence.ConstellationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Constellation.Infrastructure.Persistence.ConstellationContext.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221027052150_AddMandatoryTrainingModulesAndCompletions")]
    partial class AddMandatoryTrainingModulesAndCompletions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AbsenceClassworkNotification", b =>
                {
                    b.Property<Guid>("AbsencesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassworkNotificationsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbsencesId", "ClassworkNotificationsId");

                    b.HasIndex("ClassworkNotificationsId");

                    b.ToTable("AbsenceClassworkNotification");
                });

            modelBuilder.Entity("ClassCoverClassworkNotification", b =>
                {
                    b.Property<Guid>("ClassworkNotificationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoversId")
                        .HasColumnType("int");

                    b.HasKey("ClassworkNotificationsId", "CoversId");

                    b.HasIndex("CoversId");

                    b.ToTable("ClassCoverClassworkNotification");
                });

            modelBuilder.Entity("ClassworkNotificationStaff", b =>
                {
                    b.Property<Guid>("ClassworkNotificationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeachersStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClassworkNotificationsId", "TeachersStaffId");

                    b.HasIndex("TeachersStaffId");

                    b.ToTable("ClassworkNotificationStaff");
                });

            modelBuilder.Entity("Constellation.Application.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AdobeConnectDefaultFolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonsCoordinatorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonsCoordinatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonsCoordinatorTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonsHeadTeacherEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SentralContactPreference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Constellation.Application.Models.EmailQueue.EmailQueueItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailQueue");
                });

            modelBuilder.Entity("Constellation.Application.Models.Identity.AppAccessToken", b =>
                {
                    b.Property<Guid>("AccessToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("MapToUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessToken");

                    b.ToTable("AspNetAccessTokens");
                });

            modelBuilder.Entity("Constellation.Application.Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Constellation.Application.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSchoolContact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStaffMember")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("SchoolContactId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Constellation.Application.Models.JobActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InactiveUntil")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobName")
                        .IsUnique()
                        .HasFilter("[JobName] IS NOT NULL");

                    b.ToTable("JobActivations");
                });

            modelBuilder.Entity("Constellation.Core.Models.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AbsenceLength")
                        .HasColumnType("int");

                    b.Property<string>("AbsenceReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbsenceTimeframe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateScanned")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ExternalExplanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalExplanationSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExternallyExplained")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTimeframe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("Constellation.Core.Models.AbsenceNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ConfirmedDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveredMessageIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.ToTable("AbsenceNotification");
                });

            modelBuilder.Entity("Constellation.Core.Models.AbsenceResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Forwarded")
                        .HasColumnType("bit");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Verifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.ToTable("AbsenceResponse");
                });

            modelBuilder.Entity("Constellation.Core.Models.AdobeConnectOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<int?>("CoverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateScheduled")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupSco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PrincipalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.HasIndex("ScoId");

                    b.ToTable("AdobeConnectOperations");

                    b.HasDiscriminator<string>("UserType").HasValue("AdobeConnectOperation");
                });

            modelBuilder.Entity("Constellation.Core.Models.AdobeConnectRoom", b =>
                {
                    b.Property<string>("ScoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Protected")
                        .HasColumnType("bit");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScoId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Constellation.Core.Models.CanvasAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowedAttempts")
                        .HasColumnType("int");

                    b.Property<int>("CanvasId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UnlockDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CanvasAssignments");
                });

            modelBuilder.Entity("Constellation.Core.Models.CanvasAssignmentSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CanvasAssignmentsSubmissions");
                });

            modelBuilder.Entity("Constellation.Core.Models.CanvasOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CanvasOperations");

                    b.HasDiscriminator<string>("OperationType").HasValue("CanvasOperation");
                });

            modelBuilder.Entity("Constellation.Core.Models.Casual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdobeConnectPrincipalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortalUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolCode");

                    b.ToTable("Casuals");
                });

            modelBuilder.Entity("Constellation.Core.Models.ClassCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.ToTable("Covers");

                    b.HasDiscriminator<string>("UserType").HasValue("ClassCover");
                });

            modelBuilder.Entity("Constellation.Core.Models.ClassworkNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AbsenceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StaffId");

                    b.ToTable("ClassworkNotifications");
                });

            modelBuilder.Entity("Constellation.Core.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Faculty")
                        .HasColumnType("int");

                    b.Property<decimal>("FullTimeEquivalentValue")
                        .HasPrecision(4, 3)
                        .HasColumnType("decimal(4,3)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("HeadTeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeadTeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Constellation.Core.Models.CourseOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Offerings");
                });

            modelBuilder.Entity("Constellation.Core.Models.Device", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateDisposed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateWarrantyExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Constellation.Core.Models.DeviceAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAllocated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber");

                    b.HasIndex("StudentId");

                    b.ToTable("DeviceAllocations");
                });

            modelBuilder.Entity("Constellation.Core.Models.DeviceNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber");

                    b.ToTable("DeviceNotes");
                });

            modelBuilder.Entity("Constellation.Core.Models.Enrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrolments");
                });

            modelBuilder.Entity("Constellation.Core.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DoNotGenerateRolls")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Constellation.Core.Models.LessonRoll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LessonDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("SchoolContactId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("SchoolCode");

                    b.HasIndex("SchoolContactId");

                    b.ToTable("LessonRolls");
                });

            modelBuilder.Entity("Constellation.Core.Models.LessonRoll+LessonRollStudentAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonRollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LessonRollId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonRollStudentAttendance");
                });

            modelBuilder.Entity("Constellation.Core.Models.MandatoryTraining.TrainingCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TrainingModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TrainingModuleId");

                    b.ToTable("MandatoryTraining_CompletionRecords");
                });

            modelBuilder.Entity("Constellation.Core.Models.MandatoryTraining.TrainingModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Expiry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MandatoryTraining_Modules");
                });

            modelBuilder.Entity("Constellation.Core.Models.MSTeamOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateScheduled")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MSTeamOperations");

                    b.HasDiscriminator<string>("UserType").HasValue("MSTeamOperation");
                });

            modelBuilder.Entity("Constellation.Core.Models.OfferingResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowLink")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.ToTable("OfferingResources");
                });

            modelBuilder.Entity("Constellation.Core.Models.OfferingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StaffId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Constellation.Core.Models.PartialAbsenceNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.ToTable("PartialAbsenceNotifications", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.PartialAbsenceResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Verification")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VerifierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.HasIndex("VerifierId");

                    b.ToTable("PartialAbsenceResponses", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.PartialAbsenceVerificationNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.ToTable("PartialAbsenceVerifications", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.School", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Division")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Electorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("HeatSchool")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipalNetwork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollCallGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimetableApplication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Constellation.Core.Models.SchoolContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("SelfRegistered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SchoolContact", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.SchoolContactRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("SchoolContactId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolCode");

                    b.HasIndex("SchoolContactId");

                    b.ToTable("SchoolContactRole", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Setting", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name", "Type");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Constellation.Core.Models.Staff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdobeConnectPrincipalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<int>("Faculty")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortalUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("StaffId");

                    b.HasIndex("SchoolCode");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Stocktake.StocktakeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptLateResponses")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StocktakeEvents");
                });

            modelBuilder.Entity("Constellation.Core.Models.Stocktake.StocktakeSighting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("LocationCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SightedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SightedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StocktakeEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StocktakeEventId");

                    b.ToTable("StocktakeSightings");
                });

            modelBuilder.Entity("Constellation.Core.Models.StoredFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StoredFiles");
                });

            modelBuilder.Entity("Constellation.Core.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AbsenceNotificationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdobeConnectPrincipalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentGrade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrolledGrade")
                        .HasColumnType("int");

                    b.Property<string>("FamilyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IncludeInAbsenceNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PortalUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("SentralStudentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("SchoolCode");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentAward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AwardedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAward");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentFamily", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("StudentFamilies");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentPartialAbsence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateScanned")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExternallyExplained")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<int>("PartialAbsenceLength")
                        .HasColumnType("int");

                    b.Property<string>("PartialAbsenceTimeframe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTimeframe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StudentId");

                    b.ToTable("PartialAbsences", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublishId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentReports");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentWholeAbsence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateScanned")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExternallyExplained")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTimeframe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StudentId");

                    b.ToTable("WholeAbsences", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Constellation.Core.Models.TimetablePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Timetable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("Constellation.Core.Models.WholeAbsenceNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ConfirmedDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveredMessageIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.ToTable("WholeAbsenceNotifications", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.WholeAbsenceResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbsenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Forwarded")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ForwardedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivedFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceivedFromName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceId");

                    b.ToTable("WholeAbsenceResponses", (string)null);
                });

            modelBuilder.Entity("CourseOfferingLesson", b =>
                {
                    b.Property<Guid>("LessonsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OfferingsId")
                        .HasColumnType("int");

                    b.HasKey("LessonsId", "OfferingsId");

                    b.HasIndex("OfferingsId");

                    b.ToTable("CourseOfferingLesson");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Constellation.Core.Models.CasualAdobeConnectOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.AdobeConnectOperation");

                    b.Property<int?>("CasualId")
                        .HasColumnType("int");

                    b.HasIndex("CasualId");

                    b.HasDiscriminator().HasValue("Casual");
                });

            modelBuilder.Entity("Constellation.Core.Models.CasualClassCover", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.ClassCover");

                    b.Property<int>("CasualId")
                        .HasColumnType("int");

                    b.HasIndex("CasualId");

                    b.HasDiscriminator().HasValue("Casual");
                });

            modelBuilder.Entity("Constellation.Core.Models.CasualMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<int>("CasualId")
                        .HasColumnType("int");

                    b.Property<int>("CoverId")
                        .HasColumnType("int");

                    b.Property<int>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasIndex("CasualId");

                    b.HasIndex("CoverId");

                    b.HasIndex("OfferingId");

                    b.HasDiscriminator().HasValue("Casual");
                });

            modelBuilder.Entity("Constellation.Core.Models.ContactAddedMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ContactId");

                    b.HasDiscriminator().HasValue("ContactAdded");
                });

            modelBuilder.Entity("Constellation.Core.Models.CreateUserCanvasOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.CanvasOperation");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortalUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CreateUser");
                });

            modelBuilder.Entity("Constellation.Core.Models.DeleteUserCanvasOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.CanvasOperation");

                    b.HasDiscriminator().HasValue("DeleteUser");
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<int>("Faculty")
                        .HasColumnType("int");

                    b.Property<int>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasIndex("OfferingId");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("Constellation.Core.Models.ModifyEnrolmentCanvasOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.CanvasOperation");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ModifyEnrolment");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentAdobeConnectOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.AdobeConnectOperation");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentEnrolledMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("StudentEnrolled");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<int>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentMSTeamOperation_StudentId");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherAdobeConnectGroupOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.AdobeConnectOperation");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("TeacherGroup");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherAdobeConnectOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.AdobeConnectOperation");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("StaffId");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherClassCover", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.ClassCover");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("StaffId");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherEmployedMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StaffId");

                    b.HasDiscriminator().HasValue("TeacherEmployed");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherMSTeamOperation", b =>
                {
                    b.HasBaseType("Constellation.Core.Models.MSTeamOperation");

                    b.Property<int?>("CoverId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherMSTeamOperation_CoverId");

                    b.Property<int>("OfferingId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TeacherMSTeamOperation_StaffId");

                    b.HasIndex("CoverId");

                    b.HasIndex("OfferingId");

                    b.HasIndex("StaffId");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("AbsenceClassworkNotification", b =>
                {
                    b.HasOne("Constellation.Core.Models.Absence", null)
                        .WithMany()
                        .HasForeignKey("AbsencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.ClassworkNotification", null)
                        .WithMany()
                        .HasForeignKey("ClassworkNotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassCoverClassworkNotification", b =>
                {
                    b.HasOne("Constellation.Core.Models.ClassworkNotification", null)
                        .WithMany()
                        .HasForeignKey("ClassworkNotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.ClassCover", null)
                        .WithMany()
                        .HasForeignKey("CoversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassworkNotificationStaff", b =>
                {
                    b.HasOne("Constellation.Core.Models.ClassworkNotification", null)
                        .WithMany()
                        .HasForeignKey("ClassworkNotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("TeachersStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Application.Models.AppSettings", b =>
                {
                    b.OwnsOne("Constellation.Application.Models.AppSettings+AbsencesModule", "Absences", b1 =>
                        {
                            b1.Property<int>("AppSettingsId")
                                .HasColumnType("int");

                            b1.Property<string>("AbsenceCoordinatorEmail")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AbsenceCoordinatorName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AbsenceCoordinatorTitle")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("AbsenceScanStartDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("DiscountedPartialReasons")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DiscountedWholeReasons")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ForwardingEmailAbsenceCoordinator")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ForwardingEmailTruancyOfficer")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PartialLengthThreshold")
                                .HasColumnType("int");

                            b1.HasKey("AppSettingsId");

                            b1.ToTable("AppSettings");

                            b1.WithOwner()
                                .HasForeignKey("AppSettingsId");
                        });

                    b.Navigation("Absences");
                });

            modelBuilder.Entity("Constellation.Core.Models.Absence", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany("Absences")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("Absences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Offering");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.AbsenceNotification", b =>
                {
                    b.HasOne("Constellation.Core.Models.Absence", "Absence")
                        .WithMany("Notifications")
                        .HasForeignKey("AbsenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Absence");
                });

            modelBuilder.Entity("Constellation.Core.Models.AbsenceResponse", b =>
                {
                    b.HasOne("Constellation.Core.Models.Absence", "Absence")
                        .WithMany("Responses")
                        .HasForeignKey("AbsenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Absence");
                });

            modelBuilder.Entity("Constellation.Core.Models.AdobeConnectOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.ClassCover", "Cover")
                        .WithMany("AdobeConnectOperations")
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Constellation.Core.Models.AdobeConnectRoom", "Room")
                        .WithMany()
                        .HasForeignKey("ScoId");

                    b.Navigation("Cover");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Constellation.Core.Models.CanvasAssignment", b =>
                {
                    b.HasOne("Constellation.Core.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Constellation.Core.Models.CanvasAssignmentSubmission", b =>
                {
                    b.HasOne("Constellation.Core.Models.CanvasAssignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.Casual", b =>
                {
                    b.HasOne("Constellation.Core.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolCode");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Constellation.Core.Models.ClassCover", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany("ClassCovers")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.ClassworkNotification", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Staff", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CompletedBy");

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.Course", b =>
                {
                    b.HasOne("Constellation.Core.Models.Staff", "HeadTeacher")
                        .WithMany("ResponsibleCourses")
                        .HasForeignKey("HeadTeacherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("HeadTeacher");
                });

            modelBuilder.Entity("Constellation.Core.Models.CourseOffering", b =>
                {
                    b.HasOne("Constellation.Core.Models.Course", "Course")
                        .WithMany("Offerings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Constellation.Core.Models.DeviceAllocation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Device", "Device")
                        .WithMany("Allocations")
                        .HasForeignKey("SerialNumber");

                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("Devices")
                        .HasForeignKey("StudentId");

                    b.Navigation("Device");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.DeviceNotes", b =>
                {
                    b.HasOne("Constellation.Core.Models.Device", "Device")
                        .WithMany("Notes")
                        .HasForeignKey("SerialNumber");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Constellation.Core.Models.Enrolment", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany("Enrolments")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("Enrolments")
                        .HasForeignKey("StudentId");

                    b.Navigation("Offering");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.LessonRoll", b =>
                {
                    b.HasOne("Constellation.Core.Models.Lesson", "Lesson")
                        .WithMany("Rolls")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Constellation.Core.Models.SchoolContact", "SchoolContact")
                        .WithMany("LessonRolls")
                        .HasForeignKey("SchoolContactId");

                    b.Navigation("Lesson");

                    b.Navigation("School");

                    b.Navigation("SchoolContact");
                });

            modelBuilder.Entity("Constellation.Core.Models.LessonRoll+LessonRollStudentAttendance", b =>
                {
                    b.HasOne("Constellation.Core.Models.LessonRoll", "LessonRoll")
                        .WithMany("Attendance")
                        .HasForeignKey("LessonRollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("LessonsAttended")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LessonRoll");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.MandatoryTraining.TrainingCompletion", b =>
                {
                    b.HasOne("Constellation.Core.Models.MandatoryTraining.TrainingModule", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("Constellation.Core.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Constellation.Core.Models.MandatoryTraining.TrainingModule", null)
                        .WithMany("Completions")
                        .HasForeignKey("TrainingModuleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.OfferingResource", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany("Resources")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.OfferingSession", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany("Sessions")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.TimetablePeriod", "Period")
                        .WithMany("OfferingSessions")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.AdobeConnectRoom", "Room")
                        .WithMany("OfferingSessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Constellation.Core.Models.Staff", "Teacher")
                        .WithMany("CourseSessions")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offering");

                    b.Navigation("Period");

                    b.Navigation("Room");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Constellation.Core.Models.PartialAbsenceNotification", b =>
                {
                    b.HasOne("Constellation.Core.Models.StudentPartialAbsence", "Absence")
                        .WithMany("Notifications")
                        .HasForeignKey("AbsenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Absence");
                });

            modelBuilder.Entity("Constellation.Core.Models.PartialAbsenceResponse", b =>
                {
                    b.HasOne("Constellation.Core.Models.StudentPartialAbsence", "Absence")
                        .WithMany("Responses")
                        .HasForeignKey("AbsenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.SchoolContact", "Verifier")
                        .WithMany()
                        .HasForeignKey("VerifierId");

                    b.Navigation("Absence");

                    b.Navigation("Verifier");
                });

            modelBuilder.Entity("Constellation.Core.Models.PartialAbsenceVerificationNotification", b =>
                {
                    b.HasOne("Constellation.Core.Models.StudentPartialAbsence", "Absence")
                        .WithMany("VerificationNotifications")
                        .HasForeignKey("AbsenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Absence");
                });

            modelBuilder.Entity("Constellation.Core.Models.SchoolContactRole", b =>
                {
                    b.HasOne("Constellation.Core.Models.School", "School")
                        .WithMany("StaffAssignments")
                        .HasForeignKey("SchoolCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Constellation.Core.Models.SchoolContact", "SchoolContact")
                        .WithMany("Assignments")
                        .HasForeignKey("SchoolContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SchoolContact");
                });

            modelBuilder.Entity("Constellation.Core.Models.Staff", b =>
                {
                    b.HasOne("Constellation.Core.Models.School", "School")
                        .WithMany("Staff")
                        .HasForeignKey("SchoolCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("School");
                });

            modelBuilder.Entity("Constellation.Core.Models.Stocktake.StocktakeSighting", b =>
                {
                    b.HasOne("Constellation.Core.Models.Stocktake.StocktakeEvent", "StocktakeEvent")
                        .WithMany("Sightings")
                        .HasForeignKey("StocktakeEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StocktakeEvent");
                });

            modelBuilder.Entity("Constellation.Core.Models.Student", b =>
                {
                    b.HasOne("Constellation.Core.Models.StudentFamily", "Family")
                        .WithMany("Students")
                        .HasForeignKey("FamilyId");

                    b.HasOne("Constellation.Core.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Family");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentAward", b =>
                {
                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("Awards")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentFamily", b =>
                {
                    b.OwnsOne("Constellation.Core.Models.StudentFamily+MailingAddress", "Address", b1 =>
                        {
                            b1.Property<string>("StudentFamilyId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Town")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudentFamilyId");

                            b1.ToTable("StudentFamilies");

                            b1.WithOwner()
                                .HasForeignKey("StudentFamilyId");
                        });

                    b.OwnsOne("Constellation.Core.Models.StudentFamily+Parent", "Parent1", b1 =>
                        {
                            b1.Property<string>("StudentFamilyId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MobileNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudentFamilyId");

                            b1.ToTable("StudentFamilies");

                            b1.WithOwner()
                                .HasForeignKey("StudentFamilyId");
                        });

                    b.OwnsOne("Constellation.Core.Models.StudentFamily+Parent", "Parent2", b1 =>
                        {
                            b1.Property<string>("StudentFamilyId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MobileNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudentFamilyId");

                            b1.ToTable("StudentFamilies");

                            b1.WithOwner()
                                .HasForeignKey("StudentFamilyId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Parent1");

                    b.Navigation("Parent2");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentPartialAbsence", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("PartialAbsences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offering");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentReport", b =>
                {
                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("Reports")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentWholeAbsence", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("WholeAbsences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offering");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.WholeAbsenceNotification", b =>
                {
                    b.HasOne("Constellation.Core.Models.StudentWholeAbsence", "Absence")
                        .WithMany("Notifications")
                        .HasForeignKey("AbsenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Absence");
                });

            modelBuilder.Entity("Constellation.Core.Models.WholeAbsenceResponse", b =>
                {
                    b.HasOne("Constellation.Core.Models.StudentWholeAbsence", "Absence")
                        .WithMany("Responses")
                        .HasForeignKey("AbsenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Absence");
                });

            modelBuilder.Entity("CourseOfferingLesson", b =>
                {
                    b.HasOne("Constellation.Core.Models.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.CourseOffering", null)
                        .WithMany()
                        .HasForeignKey("OfferingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Application.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Constellation.Application.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constellation.Core.Models.CasualAdobeConnectOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Casual", "Casual")
                        .WithMany("AdobeConnectOperations")
                        .HasForeignKey("CasualId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Casual");
                });

            modelBuilder.Entity("Constellation.Core.Models.CasualClassCover", b =>
                {
                    b.HasOne("Constellation.Core.Models.Casual", "Casual")
                        .WithMany("ClassCovers")
                        .HasForeignKey("CasualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Casual");
                });

            modelBuilder.Entity("Constellation.Core.Models.CasualMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Casual", "Casual")
                        .WithMany("MSTeamOperations")
                        .HasForeignKey("CasualId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.CasualClassCover", "Cover")
                        .WithMany("MSTeamOperations")
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Casual");

                    b.Navigation("Cover");

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.ContactAddedMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.SchoolContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Constellation.Core.Models.GroupMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentAdobeConnectOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("AdobeConnectOperations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentEnrolledMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Student", "Student")
                        .WithMany("MSTeamOperations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offering");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherAdobeConnectGroupOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Staff", "Teacher")
                        .WithMany("AdobeConnectGroupOperations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherAdobeConnectOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Staff", "Teacher")
                        .WithMany("AdobeConnectOperations")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherClassCover", b =>
                {
                    b.HasOne("Constellation.Core.Models.Staff", "Staff")
                        .WithMany("ClassCovers")
                        .HasForeignKey("StaffId");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherEmployedMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherMSTeamOperation", b =>
                {
                    b.HasOne("Constellation.Core.Models.TeacherClassCover", "Cover")
                        .WithMany("MSTeamOperations")
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Constellation.Core.Models.CourseOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constellation.Core.Models.Staff", "Staff")
                        .WithMany("MSTeamOperations")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cover");

                    b.Navigation("Offering");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Constellation.Core.Models.Absence", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Constellation.Core.Models.AdobeConnectRoom", b =>
                {
                    b.Navigation("OfferingSessions");
                });

            modelBuilder.Entity("Constellation.Core.Models.Casual", b =>
                {
                    b.Navigation("AdobeConnectOperations");

                    b.Navigation("ClassCovers");

                    b.Navigation("MSTeamOperations");
                });

            modelBuilder.Entity("Constellation.Core.Models.ClassCover", b =>
                {
                    b.Navigation("AdobeConnectOperations");
                });

            modelBuilder.Entity("Constellation.Core.Models.Course", b =>
                {
                    b.Navigation("Offerings");
                });

            modelBuilder.Entity("Constellation.Core.Models.CourseOffering", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("ClassCovers");

                    b.Navigation("Enrolments");

                    b.Navigation("Resources");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Constellation.Core.Models.Device", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Constellation.Core.Models.Lesson", b =>
                {
                    b.Navigation("Rolls");
                });

            modelBuilder.Entity("Constellation.Core.Models.LessonRoll", b =>
                {
                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("Constellation.Core.Models.MandatoryTraining.TrainingModule", b =>
                {
                    b.Navigation("Completions");
                });

            modelBuilder.Entity("Constellation.Core.Models.School", b =>
                {
                    b.Navigation("Staff");

                    b.Navigation("StaffAssignments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.SchoolContact", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("LessonRolls");
                });

            modelBuilder.Entity("Constellation.Core.Models.Staff", b =>
                {
                    b.Navigation("AdobeConnectGroupOperations");

                    b.Navigation("AdobeConnectOperations");

                    b.Navigation("ClassCovers");

                    b.Navigation("CourseSessions");

                    b.Navigation("MSTeamOperations");

                    b.Navigation("ResponsibleCourses");
                });

            modelBuilder.Entity("Constellation.Core.Models.Stocktake.StocktakeEvent", b =>
                {
                    b.Navigation("Sightings");
                });

            modelBuilder.Entity("Constellation.Core.Models.Student", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("AdobeConnectOperations");

                    b.Navigation("Awards");

                    b.Navigation("Devices");

                    b.Navigation("Enrolments");

                    b.Navigation("LessonsAttended");

                    b.Navigation("MSTeamOperations");

                    b.Navigation("PartialAbsences");

                    b.Navigation("Reports");

                    b.Navigation("WholeAbsences");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentFamily", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentPartialAbsence", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Responses");

                    b.Navigation("VerificationNotifications");
                });

            modelBuilder.Entity("Constellation.Core.Models.StudentWholeAbsence", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Constellation.Core.Models.TimetablePeriod", b =>
                {
                    b.Navigation("OfferingSessions");
                });

            modelBuilder.Entity("Constellation.Core.Models.CasualClassCover", b =>
                {
                    b.Navigation("MSTeamOperations");
                });

            modelBuilder.Entity("Constellation.Core.Models.TeacherClassCover", b =>
                {
                    b.Navigation("MSTeamOperations");
                });
#pragma warning restore 612, 618
        }
    }
}
