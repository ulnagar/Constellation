@model StudentTimetableDataDto

@using Constellation.Application.DTOs
@using Constellation.Application.Extensions
@using Constellation.Core.Models.Timetables.Enums
@using Constellation.Core.Models.Timetables.ValueObjects

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        .Timetable-Week {
            /*margin-top: 1rem;*/
            /*margin-left: 5%;*/
            /*border: 1px solid red;*/
            display: flex;
            flex-direction: row;
            align-items: stretch;
            align-content: stretch;
        }

        .Timetable-Day {
            /*border: 1px solid green;*/
            /*margin: 2px;*/
            display: flex;
            padding: 5px 0;
            flex-direction: column;
            align-items: stretch;
            align-content: stretch;
            width: 175px;
        }

        .Timetable-Day-Title {
            height: 20px;
            text-align: center;
            font-weight: bolder;
            margin: 2px 1px;
        }

        .Timetable-Day-Period {
            border: 1px solid green;
            height: 4rem;
            margin: 2px;
            padding: 0.5rem;
            text-align: center;
            /*width: 10vw;*/
            background-color: azure;
        }

        .Timetable-Day-Period.ClassDetails {
            height: 5rem;
        }

        .Timetable-Day-Period.SingleCustom {
            height: 7rem;
        }

        .Timetable-Day-Period.DoubleCustom {
            height: 9rem;
        }

        .Timetable-Day-Period.Inactive {
            /*background-color: cornflowerblue;*/
        }

        .Timetable-Day-Period.Active {
            background-color: darkseagreen;
            font-weight: bold;
        }

        .Timetable-Day-Period.Break {
            background-color: lightyellow;
        }

        .Timetable-Day-Period.Offline {
            background-color: lightgray;
        }

        .custom-time {
            display: block;
            color: red;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        .class-details {
            display: block;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        .Page {
            margin-left: 3%;
            margin-right: 3%;
        }
    </style>
</head>
<body>

    <div class="Page">
    @{
        IEnumerable<IGrouping<Timetable, TimetableDataDto.TimetableData>> timetables = new List<IGrouping<Timetable, TimetableDataDto.TimetableData>>();
        if (Model.Timetables != null)
        {
            timetables = Model.Timetables.OrderBy(data => data.Timetable).GroupBy(data => data.Timetable);
        }

        @foreach (var block in timetables)
        {
            var weeks = block.OrderBy(p => p.Week.Value).GroupBy(p => p.Week);

            <div>
                @foreach (var week in weeks)
                {
                    var days = week.OrderBy(p => p.Day.Value).GroupBy(p => p.Day);
                    var firstDay = true;

                    if (week.Key.Value > 1)
                    {
                        <div style="page-break-after: always; border: none;"></div>
                    }

                    <div class="Timetable-Week">
                        @foreach (var day in days)
                        {
                            var periods = day.OrderBy(p => p.StartTime).ToList();

                            if (firstDay)
                            {
                                <div class="Timetable-Day">
                                    <div class="Timetable-Day-Title"></div>
                                    @foreach (var period in periods)
                                    {
                                        var matchingPeriods = week.Where(p => p.StartTime == period.StartTime).ToList();

                                        var collapseState = (matchingPeriods.Any(p => !string.IsNullOrWhiteSpace(p.ClassName)) ? "ClassDetails" : "");
                                        collapseState = (matchingPeriods.Any(p => p.EntryTime != TimeOnly.FromTimeSpan(p.StartTime) && p.EntryTime != TimeOnly.MinValue) ? "SingleCustom" : collapseState);
                                        collapseState = (matchingPeriods.Any(p => p.ExitTime != TimeOnly.FromTimeSpan(p.EndTime) && p.ExitTime != TimeOnly.MinValue) ? "SingleCustom" : collapseState);
                                        collapseState = (matchingPeriods.Any(p => p.EntryTime != TimeOnly.FromTimeSpan(p.StartTime) && p.EntryTime != TimeOnly.MinValue && p.ExitTime != TimeOnly.FromTimeSpan(p.EndTime) && p.ExitTime != TimeOnly.MinValue) ? "DoubleCustom" : collapseState);

                                        <div class="Timetable-Day-Period @period.Type.Name @collapseState">
                                            @period.Name<br />
                                            @period.StartTime.As12HourTime() - @period.EndTime.As12HourTime()
                                        </div>
                                    }
                                </div>
                            }

                            <div class="Timetable-Day">
                                <div class="Timetable-Day-Title">
                                    @week.Key.Name - @day.Key.Name
                                </div>
                                @foreach (var period in periods)
                                {
                                    var style = "";

                                    if (string.IsNullOrWhiteSpace(period.ClassName))
                                    {
                                        style += " Inactive";
                                    }
                                    else
                                    {
                                        style += " Active";
                                    }

                                    if (period.Type == PeriodType.Break)
                                    {
                                        style += " Break";
                                    }

                                    var matchingPeriods = week.Where(p => p.StartTime == period.StartTime).ToList();

                                    var collapseState = (matchingPeriods.Any(p => !string.IsNullOrWhiteSpace(p.ClassName)) ? "ClassDetails" : "");
                                    collapseState = (matchingPeriods.Any(p => p.EntryTime != TimeOnly.FromTimeSpan(p.StartTime) && p.EntryTime != TimeOnly.MinValue) ? "SingleCustom" : collapseState);
                                    collapseState = (matchingPeriods.Any(p => p.ExitTime != TimeOnly.FromTimeSpan(p.EndTime) && p.ExitTime != TimeOnly.MinValue) ? "SingleCustom" : collapseState);
                                    collapseState = (matchingPeriods.Any(p => p.EntryTime != TimeOnly.FromTimeSpan(p.StartTime) && p.EntryTime != TimeOnly.MinValue && p.ExitTime != TimeOnly.FromTimeSpan(p.EndTime) && p.ExitTime != TimeOnly.MinValue) ? "DoubleCustom" : collapseState);

                                    <div class="Timetable-Day-Period @style @collapseState">
                                        @if (period.EntryTime != TimeOnly.FromTimeSpan(period.StartTime) && period.EntryTime != TimeOnly.MinValue)
                                        {
                                            <div class="custom-time">
                                                Class Entry Time:<br />
                                                @period.EntryTime.ToString("h:mm tt")
                                            </div>
                                        }

                                        @if (!string.IsNullOrWhiteSpace(period.ClassName))
                                        {
                                            <div class="class-details">
                                                @period.ClassName
                                                <br/>
                                                @period.ClassTeacher
                                            </div>
                                        }
                                        
                                        @if (period.ExitTime != TimeOnly.FromTimeSpan(period.EndTime) && period.ExitTime != TimeOnly.MinValue)
                                        {
                                            <div class="custom-time">
                                                Class Exit Time:<br />
                                                @period.ExitTime.ToString("h:mm tt")
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            firstDay = false;
                        }
                    </div>
                }
            </div>
        }
    }
    </div>

</body>
</html>